// This file is part of Allfeat.

// Copyright (C) 2022-2025 Allfeat.
// SPDX-License-Identifier: GPL-3.0-or-later

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//! Autogenerated weights for pallet_ats
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-11-08, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: ``, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ./target/debug/wbuild/harmonie-runtime/harmonie_runtime.wasm
// --genesis-builder-preset=development
// --pallet=pallet-ats
// --extrinsic=*
// --header=./HEADER
// --template=./.maintain/frame-weight-template.hbs
// --output=./runtime/shared/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::weights::constants::{ParityDbWeight, RocksDbWeight};
use frame_support::weights::Weight;
use frame_support::traits::Get;
use core::marker::PhantomData;

/// Weight functions needed for pallet_ats_party_identifiers.
pub trait WeightInfo {
	fn register(x: u32, ) -> Weight;
	fn unregister() -> Weight;
}

/// Weights for pallet_ats using the Allfeat node and recommended hardware.
impl WeightInfo for () {
	fn register(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `79`
		//  Estimated: `3694`
		// Minimum execution time: 97_161_000 picoseconds.
		Weight::from_parts(104_789_842, 3694)
			// Standard Error: 417
			.saturating_add(Weight::from_parts(5_511, 0).saturating_mul(x.into()))
			.saturating_add(ParityDbWeight::get().reads(4_u64))
			.saturating_add(ParityDbWeight::get().writes(5_u64))
	}

	fn unregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `275`
		//  Estimated: `3740`
		// Minimum execution time: 77_160_000 picoseconds.
		Weight::from_parts(80_000_000, 3740)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
	}
}
