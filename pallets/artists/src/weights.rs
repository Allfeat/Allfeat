//! Autogenerated weights for pallet_artists
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-de-Lois.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/allfeat
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-artists
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=artists.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_artists.
pub trait WeightInfo {
    fn register(n: u32, g: u32, a: u32, ) -> Weight;
    fn force_unregister(n: u32, g: u32, a: u32, ) -> Weight;
    fn unregister(n: u32, g: u32, a: u32, ) -> Weight;
    fn update_alias(n: u32, x: u32, ) -> Weight;
    fn update_add_genres(n: u32, ) -> Weight;
    fn update_remove_genres(n: u32, ) -> Weight;
    fn update_clear_genres(n: u32, ) -> Weight;
    fn update_description() -> Weight;
    fn update_add_assets(n: u32, ) -> Weight;
    fn update_remove_assets(n: u32, ) -> Weight;
    fn update_clear_assets(n: u32, ) -> Weight;
}

/// For backwards compatibility and tests
impl WeightInfo for () {
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Holds` (r:1 w:1)
    /// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 128]`.
    /// The range of component `g` is `[0, 5]`.
    /// The range of component `a` is `[0, 64]`.
    fn register(n: u32, g: u32, a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `76`
        //  Estimated: `16124`
        // Minimum execution time: 165_000_000 picoseconds.
        Weight::from_parts(5_895_691, 16124)
            // Standard Error: 75_465
            .saturating_add(Weight::from_parts(1_282_433, 0).saturating_mul(n.into()))
            // Standard Error: 1_724_768
            .saturating_add(Weight::from_parts(8_934_318, 0).saturating_mul(g.into()))
            // Standard Error: 149_054
            .saturating_add(Weight::from_parts(31_929_514, 0).saturating_mul(a.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: `Balances::Holds` (r:1 w:1)
    /// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
    /// Storage: `Artists::ArtistOf` (r:0 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 128]`.
    /// The range of component `g` is `[0, 5]`.
    /// The range of component `a` is `[0, 64]`.
    fn force_unregister(n: u32, g: u32, a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `118`
        //  Estimated: `4402`
        // Minimum execution time: 92_000_000 picoseconds.
        Weight::from_parts(92_911_331, 4402)
            // Standard Error: 947
            .saturating_add(Weight::from_parts(4_111, 0).saturating_mul(n.into()))
            // Standard Error: 21_652
            .saturating_add(Weight::from_parts(110_423, 0).saturating_mul(g.into()))
            // Standard Error: 1_871
            .saturating_add(Weight::from_parts(5_196, 0).saturating_mul(a.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Holds` (r:1 w:1)
    /// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 128]`.
    /// The range of component `g` is `[0, 5]`.
    /// The range of component `a` is `[0, 64]`.
    fn unregister(_n: u32, g: u32, a: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `314 + a * (32 ±0) + g * (3 ±0) + n * (2 ±0)`
        //  Estimated: `16124`
        // Minimum execution time: 130_000_000 picoseconds.
        Weight::from_parts(141_218_178, 16124)
            // Standard Error: 24_917
            .saturating_add(Weight::from_parts(71_438, 0).saturating_mul(g.into()))
            // Standard Error: 2_153
            .saturating_add(Weight::from_parts(11_973, 0).saturating_mul(a.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Holds` (r:1 w:0)
    /// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 128]`.
    /// The range of component `x` is `[1, 128]`.
    fn update_alias(_n: u32, x: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `295 + n * (2 ±0)`
        //  Estimated: `16124`
        // Minimum execution time: 14_000_000 picoseconds.
        Weight::from_parts(47_930_120, 16124)
            // Standard Error: 4_071
            .saturating_add(Weight::from_parts(15_145, 0).saturating_mul(x.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[0, 4]`.
    fn update_add_genres(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `198 + n * (3 ±0)`
        //  Estimated: `16124`
        // Minimum execution time: 11_000_000 picoseconds.
        Weight::from_parts(11_578_271, 16124)
            // Standard Error: 14_289
            .saturating_add(Weight::from_parts(302_453, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 5]`.
    fn update_remove_genres(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `198 + n * (3 ±0)`
        //  Estimated: `16124`
        // Minimum execution time: 11_000_000 picoseconds.
        Weight::from_parts(12_224_824, 16124)
            // Standard Error: 31_119
            .saturating_add(Weight::from_parts(86_974, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[0, 5]`.
    fn update_clear_genres(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `198 + n * (3 ±0)`
        //  Estimated: `16124`
        // Minimum execution time: 10_000_000 picoseconds.
        Weight::from_parts(11_122_480, 16124)
            // Standard Error: 12_695
            .saturating_add(Weight::from_parts(50_257, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Holds` (r:1 w:1)
    /// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
    fn update_description() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `298`
        //  Estimated: `16124`
        // Minimum execution time: 68_000_000 picoseconds.
        Weight::from_parts(70_000_000, 16124)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Holds` (r:1 w:1)
    /// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[0, 63]`.
    fn update_add_assets(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `316 + n * (32 ±0)`
        //  Estimated: `16124`
        // Minimum execution time: 45_000_000 picoseconds.
        Weight::from_parts(46_039_569, 16124)
            // Standard Error: 3_787
            .saturating_add(Weight::from_parts(162_626, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Holds` (r:1 w:1)
    /// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 64]`.
    fn update_remove_assets(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `316 + n * (32 ±0)`
        //  Estimated: `16124`
        // Minimum execution time: 38_000_000 picoseconds.
        Weight::from_parts(39_473_860, 16124)
            // Standard Error: 4_385
            .saturating_add(Weight::from_parts(138_221, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// Storage: `Artists::ArtistOf` (r:1 w:1)
    /// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Holds` (r:1 w:1)
    /// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[0, 64]`.
    fn update_clear_assets(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `316 + n * (32 ±0)`
        //  Estimated: `16124`
        // Minimum execution time: 28_000_000 picoseconds.
        Weight::from_parts(40_107_255, 16124)
            // Standard Error: 4_516
            .saturating_add(Weight::from_parts(13_602, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
}