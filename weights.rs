
//! Autogenerated weights for `pallet_artists`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-20, STEPS: `50`, REPEAT: 30, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `DESKTOP-11NSJM8`, CPU: `Intel(R) Core(TM) i7-10700K CPU @ 3.80GHz`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/allfeat
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_artists
// --extrinsic
// *
// --steps
// 50
// --repeat
// 30
// --output
// weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_artists`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_artists::WeightInfo for WeightInfo<T> {
	// Storage: Artists Artists (r:1 w:0)
	// Storage: Artists Candidates (r:1 w:1)
	/// The range of component `n` is `[1, 128]`.
	fn submit_candidacy(_n: u32, ) -> Weight {
		(26_586_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Artists Candidates (r:1 w:1)
	fn withdraw_candidacy() -> Weight {
		(22_900_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Artists Artists (r:1 w:1)
	// Storage: Artists Candidates (r:1 w:1)
	/// The range of component `n` is `[1, 128]`.
	fn approve_candidacy(n: u32, ) -> Weight {
		(19_223_000 as Weight)
			// Standard Error: 0
			.saturating_add((5_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Artists Artists (r:1 w:0)
	fn call_as_artist() -> Weight {
		(16_600_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Artists Candidates (r:1 w:0)
	fn call_as_candidate() -> Weight {
		(16_800_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
}
