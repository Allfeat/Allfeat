
//! Autogenerated weights for pallet_artist_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `symphonie-node-3`, CPU: `Intel Xeon Processor (Skylake, IBRS)`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/allfeat
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_artist_identity
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/symphonie/src/weights/artist-identity.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_artist_identity.
pub trait WeightInfo {
	fn update_alias(n: u32, ) -> Weight;
	fn update_bio(n: u32, ) -> Weight;
	fn update_profile_picture(n: u32, ) -> Weight;
	fn update_twitter(n: u32, ) -> Weight;
	fn update_facebook(n: u32, ) -> Weight;
	fn update_instagram(n: u32, ) -> Weight;
	fn update_spotify(n: u32, ) -> Weight;
	fn update_apple_music(n: u32, ) -> Weight;
	fn update_music_styles(n: u32, x: u32, ) -> Weight;
}

/// Weights for pallet_artist_identity using the Allfeat node and recommended hardware.
pub struct AllfeatWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_artist_identity::weights::WeightInfo for AllfeatWeight<T> {
	/// Storage: `ArtistIdentity::ArtistMetadata` (r:1 w:1)
	/// Proof: `ArtistIdentity::ArtistMetadata` (`max_values`: None, `max_size`: Some(1638), added: 4113, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 128]`.
	fn update_alias(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `5103`
		// Minimum execution time: 30_807_000 picoseconds.
		Weight::from_parts(136_716_583, 5103)
			// Standard Error: 44_970
			.saturating_add(Weight::from_parts(78_823, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ArtistIdentity::ArtistMetadata` (r:1 w:1)
	/// Proof: `ArtistIdentity::ArtistMetadata` (`max_values`: None, `max_size`: Some(1638), added: 4113, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 512]`.
	fn update_bio(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `5103`
		// Minimum execution time: 54_244_000 picoseconds.
		Weight::from_parts(142_795_050, 5103)
			// Standard Error: 12_430
			.saturating_add(Weight::from_parts(19_574, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ArtistIdentity::ArtistMetadata` (r:1 w:1)
	/// Proof: `ArtistIdentity::ArtistMetadata` (`max_values`: None, `max_size`: Some(1638), added: 4113, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 128]`.
	fn update_profile_picture(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `5103`
		// Minimum execution time: 29_714_000 picoseconds.
		Weight::from_parts(122_557_631, 5103)
			// Standard Error: 47_033
			.saturating_add(Weight::from_parts(379_499, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ArtistIdentity::ArtistMetadata` (r:1 w:1)
	/// Proof: `ArtistIdentity::ArtistMetadata` (`max_values`: None, `max_size`: Some(1638), added: 4113, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 128]`.
	fn update_twitter(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `5103`
		// Minimum execution time: 46_079_000 picoseconds.
		Weight::from_parts(169_675_470, 5103)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ArtistIdentity::ArtistMetadata` (r:1 w:1)
	/// Proof: `ArtistIdentity::ArtistMetadata` (`max_values`: None, `max_size`: Some(1638), added: 4113, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 128]`.
	fn update_facebook(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `5103`
		// Minimum execution time: 47_762_000 picoseconds.
		Weight::from_parts(101_616_688, 5103)
			// Standard Error: 24_714
			.saturating_add(Weight::from_parts(173_062, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ArtistIdentity::ArtistMetadata` (r:1 w:1)
	/// Proof: `ArtistIdentity::ArtistMetadata` (`max_values`: None, `max_size`: Some(1638), added: 4113, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 128]`.
	fn update_instagram(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `5103`
		// Minimum execution time: 44_924_000 picoseconds.
		Weight::from_parts(102_213_717, 5103)
			// Standard Error: 24_703
			.saturating_add(Weight::from_parts(136_670, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ArtistIdentity::ArtistMetadata` (r:1 w:1)
	/// Proof: `ArtistIdentity::ArtistMetadata` (`max_values`: None, `max_size`: Some(1638), added: 4113, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 128]`.
	fn update_spotify(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `5103`
		// Minimum execution time: 63_625_000 picoseconds.
		Weight::from_parts(141_972_886, 5103)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ArtistIdentity::ArtistMetadata` (r:1 w:1)
	/// Proof: `ArtistIdentity::ArtistMetadata` (`max_values`: None, `max_size`: Some(1638), added: 4113, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 128]`.
	fn update_apple_music(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `182`
		//  Estimated: `5103`
		// Minimum execution time: 64_762_000 picoseconds.
		Weight::from_parts(133_966_600, 5103)
			// Standard Error: 46_062
			.saturating_add(Weight::from_parts(119_888, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ArtistIdentity::ArtistMetadata` (r:1 w:1)
	/// Proof: `ArtistIdentity::ArtistMetadata` (`max_values`: None, `max_size`: Some(1638), added: 4113, mode: `MaxEncodedLen`)
	/// Storage: `MusicStyles::Styles` (r:1 w:0)
	/// Proof: `MusicStyles::Styles` (`max_values`: Some(1), `max_size`: Some(34881), added: 35376, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 5]`.
	/// The range of component `x` is `[1, 32]`.
	fn update_music_styles(n: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `87 + n * (34 ±0) + x * (5 ±0)`
		//  Estimated: `36366`
		// Minimum execution time: 74_404_000 picoseconds.
		Weight::from_parts(96_015_078, 36366)
			// Standard Error: 1_334_557
			.saturating_add(Weight::from_parts(10_155_324, 0).saturating_mul(n.into()))
			// Standard Error: 193_595
			.saturating_add(Weight::from_parts(961_777, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}
