
//! Autogenerated weights for pallet_bags_list
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-de-Lois.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/allfeat
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_bags_list
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/harmonie/src/weights/bags-list.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_bags_list.
pub trait WeightInfo {
	fn rebag_non_terminal() -> Weight;
	fn rebag_terminal() -> Weight;
	fn put_in_front_of() -> Weight;
}

/// Weights for pallet_bags_list using the Allfeat node and recommended hardware.
pub struct AllfeatWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_bags_list::WeightInfo for AllfeatWeight<T> {
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1067), added: 3542, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:4 w:4)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListBags` (r:1 w:1)
	/// Proof: `BagsList::ListBags` (`max_values`: None, `max_size`: Some(58), added: 2533, mode: `MaxEncodedLen`)
	fn rebag_non_terminal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1387`
		//  Estimated: `11314`
		// Minimum execution time: 45_000_000 picoseconds.
		Weight::from_parts(46_000_000, 11314)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1067), added: 3542, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:3 w:3)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListBags` (r:2 w:2)
	/// Proof: `BagsList::ListBags` (`max_values`: None, `max_size`: Some(58), added: 2533, mode: `MaxEncodedLen`)
	fn rebag_terminal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1306`
		//  Estimated: `8733`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(44_000_000, 8733)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `BagsList::ListNodes` (r:4 w:4)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:2 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:2 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1067), added: 3542, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::CounterForListNodes` (r:1 w:1)
	/// Proof: `BagsList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListBags` (r:1 w:1)
	/// Proof: `BagsList::ListBags` (`max_values`: None, `max_size`: Some(58), added: 2533, mode: `MaxEncodedLen`)
	fn put_in_front_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1519`
		//  Estimated: `11314`
		// Minimum execution time: 53_000_000 picoseconds.
		Weight::from_parts(54_000_000, 11314)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
}
