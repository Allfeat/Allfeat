// This file is part of Allfeat.

// Copyright (C) 2022-2024 Allfeat.
// SPDX-License-Identifier: GPL-3.0-or-later

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//! Autogenerated weights for pallet_artists
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-03-27, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `weights-allfeat`, CPU: `AMD EPYC-Milan Processor`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("harmonie-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/allfeat
// benchmark
// pallet
// --chain=harmonie-dev
// --steps=50
// --repeat=20
// --pallet=pallet_artists
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/harmonie/src/weights/artists.rs
// --header=./HEADER
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_artists.
pub trait WeightInfo {
	fn register(n: u32, g: u32, a: u32, ) -> Weight;
	fn force_unregister(n: u32, g: u32, a: u32, ) -> Weight;
	fn unregister(n: u32, g: u32, a: u32, ) -> Weight;
	fn update_alias(n: u32, x: u32, ) -> Weight;
	fn update_add_genres(n: u32, ) -> Weight;
	fn update_remove_genres(n: u32, ) -> Weight;
	fn update_clear_genres(n: u32, ) -> Weight;
	fn update_description() -> Weight;
	fn update_add_assets(n: u32, ) -> Weight;
	fn update_remove_assets(n: u32, ) -> Weight;
	fn update_clear_assets(n: u32, ) -> Weight;
}

/// Weights for pallet_artists using the Allfeat node and recommended hardware.
pub struct AllfeatWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_artists::weights::WeightInfo for AllfeatWeight<T> {
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 128]`.
	/// The range of component `g` is `[0, 5]`.
	/// The range of component `a` is `[0, 64]`.
	fn register(_n: u32, _g: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `16124`
		// Minimum execution time: 134_440_000 picoseconds.
		Weight::from_parts(170_658_458, 16124)
			// Standard Error: 44_925
			.saturating_add(Weight::from_parts(27_819_732, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	/// Storage: `Artists::ArtistOf` (r:0 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 128]`.
	/// The range of component `g` is `[0, 5]`.
	/// The range of component `a` is `[0, 64]`.
	fn force_unregister(n: u32, g: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `118`
		//  Estimated: `3610`
		// Minimum execution time: 81_132_000 picoseconds.
		Weight::from_parts(76_747_966, 3610)
			// Standard Error: 2_386
			.saturating_add(Weight::from_parts(47_499, 0).saturating_mul(n.into()))
			// Standard Error: 54_532
			.saturating_add(Weight::from_parts(943_938, 0).saturating_mul(g.into()))
			// Standard Error: 4_712
			.saturating_add(Weight::from_parts(11_161, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 128]`.
	/// The range of component `g` is `[0, 5]`.
	/// The range of component `a` is `[0, 64]`.
	fn unregister(n: u32, g: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `314 + a * (32 ±0) + g * (3 ±0) + n * (2 ±0)`
		//  Estimated: `16124`
		// Minimum execution time: 116_164_000 picoseconds.
		Weight::from_parts(126_254_394, 16124)
			// Standard Error: 1_603
			.saturating_add(Weight::from_parts(10_563, 0).saturating_mul(n.into()))
			// Standard Error: 36_641
			.saturating_add(Weight::from_parts(97_659, 0).saturating_mul(g.into()))
			// Standard Error: 3_166
			.saturating_add(Weight::from_parts(45_108, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:0)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 128]`.
	/// The range of component `x` is `[1, 128]`.
	fn update_alias(_n: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295 + n * (2 ±0)`
		//  Estimated: `16124`
		// Minimum execution time: 12_289_000 picoseconds.
		Weight::from_parts(42_985_551, 16124)
			// Standard Error: 3_741
			.saturating_add(Weight::from_parts(16_131, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 4]`.
	fn update_add_genres(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `198 + n * (3 ±0)`
		//  Estimated: `16124`
		// Minimum execution time: 8_773_000 picoseconds.
		Weight::from_parts(9_544_215, 16124)
			// Standard Error: 5_494
			.saturating_add(Weight::from_parts(171_555, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 5]`.
	fn update_remove_genres(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `198 + n * (3 ±0)`
		//  Estimated: `16124`
		// Minimum execution time: 8_723_000 picoseconds.
		Weight::from_parts(9_307_984, 16124)
			// Standard Error: 5_428
			.saturating_add(Weight::from_parts(28_065, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 5]`.
	fn update_clear_genres(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `198 + n * (3 ±0)`
		//  Estimated: `16124`
		// Minimum execution time: 8_343_000 picoseconds.
		Weight::from_parts(9_114_148, 16124)
			// Standard Error: 4_742
			.saturating_add(Weight::from_parts(51_166, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	fn update_description() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `298`
		//  Estimated: `16124`
		// Minimum execution time: 61_142_000 picoseconds.
		Weight::from_parts(62_243_000, 16124)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 63]`.
	fn update_add_assets(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316 + n * (32 ±0)`
		//  Estimated: `16124`
		// Minimum execution time: 40_110_000 picoseconds.
		Weight::from_parts(41_516_796, 16124)
			// Standard Error: 3_204
			.saturating_add(Weight::from_parts(181_043, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 64]`.
	fn update_remove_assets(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316 + n * (32 ±0)`
		//  Estimated: `16124`
		// Minimum execution time: 34_231_000 picoseconds.
		Weight::from_parts(35_222_596, 16124)
			// Standard Error: 1_367
			.saturating_add(Weight::from_parts(134_665, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 64]`.
	fn update_clear_assets(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316 + n * (32 ±0)`
		//  Estimated: `16124`
		// Minimum execution time: 24_938_000 picoseconds.
		Weight::from_parts(38_544_349, 16124)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}
