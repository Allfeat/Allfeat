
//! Autogenerated weights for pallet_artists
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-de-Lois.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/allfeat
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_artists
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/harmonie/src/weights/artists.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_artists.
pub trait WeightInfo {
	fn register(n: u32, g: u32, a: u32, ) -> Weight;
	fn force_unregister(n: u32, g: u32, a: u32, ) -> Weight;
	fn unregister(n: u32, g: u32, a: u32, ) -> Weight;
	fn update_alias(n: u32, x: u32, ) -> Weight;
	fn update_add_genres(n: u32, ) -> Weight;
	fn update_remove_genres(n: u32, ) -> Weight;
	fn update_clear_genres(n: u32, ) -> Weight;
	fn update_description() -> Weight;
	fn update_add_assets(n: u32, ) -> Weight;
	fn update_remove_assets(n: u32, ) -> Weight;
	fn update_clear_assets(n: u32, ) -> Weight;
}

/// Weights for pallet_artists using the Allfeat node and recommended hardware.
pub struct AllfeatWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_artists::weights::WeightInfo for AllfeatWeight<T> {
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(18470), added: 20945, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 128]`.
	/// The range of component `g` is `[0, 5]`.
	/// The range of component `a` is `[0, 64]`.
	fn register(_n: u32, g: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `21935`
		// Minimum execution time: 149_000_000 picoseconds.
		Weight::from_parts(161_620_305, 21935)
			// Standard Error: 270_582
			.saturating_add(Weight::from_parts(918_153, 0).saturating_mul(g.into()))
			// Standard Error: 23_383
			.saturating_add(Weight::from_parts(30_948_244, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(18470), added: 20945, mode: `MaxEncodedLen`)
	/// Storage: `Artists::ArtistOf` (r:0 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 128]`.
	/// The range of component `g` is `[0, 5]`.
	/// The range of component `a` is `[0, 64]`.
	fn force_unregister(n: u32, g: u32, _a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `118`
		//  Estimated: `21935`
		// Minimum execution time: 89_000_000 picoseconds.
		Weight::from_parts(90_371_675, 21935)
			// Standard Error: 1_300
			.saturating_add(Weight::from_parts(8_295, 0).saturating_mul(n.into()))
			// Standard Error: 29_728
			.saturating_add(Weight::from_parts(257_784, 0).saturating_mul(g.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(18470), added: 20945, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 128]`.
	/// The range of component `g` is `[0, 5]`.
	/// The range of component `a` is `[0, 64]`.
	fn unregister(_n: u32, g: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `314 + a * (32 ±0) + g * (3 ±0) + n * (2 ±0)`
		//  Estimated: `21935`
		// Minimum execution time: 128_000_000 picoseconds.
		Weight::from_parts(140_264_032, 21935)
			// Standard Error: 29_130
			.saturating_add(Weight::from_parts(10_911, 0).saturating_mul(g.into()))
			// Standard Error: 2_517
			.saturating_add(Weight::from_parts(11_712, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:0)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(18470), added: 20945, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 128]`.
	/// The range of component `x` is `[1, 128]`.
	fn update_alias(_n: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295 + n * (2 ±0)`
		//  Estimated: `21935`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(45_432_860, 21935)
			// Standard Error: 4_153
			.saturating_add(Weight::from_parts(19_281, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 4]`.
	fn update_add_genres(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `198 + n * (3 ±0)`
		//  Estimated: `16124`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(9_974_299, 16124)
			// Standard Error: 7_249
			.saturating_add(Weight::from_parts(43_224, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 5]`.
	fn update_remove_genres(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `198 + n * (3 ±0)`
		//  Estimated: `16124`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(9_265_887, 16124)
			// Standard Error: 18_632
			.saturating_add(Weight::from_parts(97_663, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 5]`.
	fn update_clear_genres(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `198 + n * (3 ±0)`
		//  Estimated: `16124`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(9_073_842, 16124)
			// Standard Error: 13_127
			.saturating_add(Weight::from_parts(103_048, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(18470), added: 20945, mode: `MaxEncodedLen`)
	fn update_description() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `298`
		//  Estimated: `21935`
		// Minimum execution time: 66_000_000 picoseconds.
		Weight::from_parts(67_000_000, 21935)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(18470), added: 20945, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 63]`.
	fn update_add_assets(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316 + n * (32 ±0)`
		//  Estimated: `21935`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(44_403_156, 21935)
			// Standard Error: 1_270
			.saturating_add(Weight::from_parts(119_846, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(18470), added: 20945, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 64]`.
	fn update_remove_assets(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316 + n * (32 ±0)`
		//  Estimated: `21935`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(36_980_401, 21935)
			// Standard Error: 1_075
			.saturating_add(Weight::from_parts(115_261, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(12659), added: 15134, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(18470), added: 20945, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 64]`.
	fn update_clear_assets(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316 + n * (32 ±0)`
		//  Estimated: `21935`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(37_191_006, 21935)
			// Standard Error: 3_944
			.saturating_add(Weight::from_parts(36_389, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}
