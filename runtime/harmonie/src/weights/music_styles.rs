
//! Autogenerated weights for pallet_music_styles
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-17, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `symphonie-node-3`, CPU: `Intel Xeon Processor (Skylake, IBRS)`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/allfeat
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_music_styles
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/symphonie/src/weights/music-styles.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_music_styles.
pub trait WeightInfo {
	fn add_style(n: u32, x: u32, ) -> Weight;
	fn add_sub_style(n: u32, x: u32, ) -> Weight;
}

/// Weights for pallet_music_styles using the Allfeat node and recommended hardware.
pub struct AllfeatWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_music_styles::WeightInfo for AllfeatWeight<T> {
	/// Storage: `MusicStyles::Styles` (r:1 w:1)
	/// Proof: `MusicStyles::Styles` (`max_values`: Some(1), `max_size`: Some(34881), added: 35376, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 32]`.
	/// The range of component `x` is `[0, 32]`.
	fn add_style(n: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `64`
		//  Estimated: `36366`
		// Minimum execution time: 42_480_000 picoseconds.
		Weight::from_parts(49_578_000, 36366)
			// Standard Error: 360_713
			.saturating_add(Weight::from_parts(2_376_968, 0).saturating_mul(n.into()))
			// Standard Error: 362_013
			.saturating_add(Weight::from_parts(17_547_758, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `MusicStyles::Styles` (r:1 w:1)
	/// Proof: `MusicStyles::Styles` (`max_values`: Some(1), `max_size`: Some(34881), added: 35376, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 32]`.
	/// The range of component `x` is `[1, 32]`.
	fn add_sub_style(_n: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `68`
		//  Estimated: `36366`
		// Minimum execution time: 32_048_000 picoseconds.
		Weight::from_parts(126_094_677, 36366)
			// Standard Error: 574_789
			.saturating_add(Weight::from_parts(19_573_926, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}
