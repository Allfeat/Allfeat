// This file is part of Allfeat.

// Copyright (C) 2022-2025 Allfeat.
// SPDX-License-Identifier: GPL-3.0-or-later

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_midds_tracks
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-06-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `melodie-node-weights`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ./target/release/wbuild/melodie-runtime/melodie_runtime.compact.compressed.wasm
// --genesis-builder-preset=development
// --pallet=pallet_midds_tracks
// --extrinsic=*
// --output=./runtime/shared/src/weights/midds_tracks.rs
// --header=./HEADER
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_midds_tracks.
pub trait WeightInfo {
	fn register(x: u32, ) -> Weight;
	fn unregister(x: u32, ) -> Weight;
}

/// Weights for pallet_midds_tracks using the Allfeat node and recommended hardware.
pub struct AllfeatWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_midds::WeightInfo for AllfeatWeight<T> {
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Tracks::NextId` (r:1 w:1)
	/// Proof: `Tracks::NextId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Tracks::HashIndex` (r:1 w:1)
	/// Proof: `Tracks::HashIndex` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(229), added: 2704, mode: `MaxEncodedLen`)
	/// Storage: `Tracks::MiddsDb` (r:0 w:1)
	/// Proof: `Tracks::MiddsDb` (`max_values`: None, `max_size`: Some(9895), added: 12370, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[37, 9831]`.
	fn register(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `118`
		//  Estimated: `3694`
		// Minimum execution time: 91_800_000 picoseconds.
		Weight::from_parts(101_047_257, 3694)
			// Standard Error: 104
			.saturating_add(Weight::from_parts(4_341, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Tracks::MiddsDb` (r:1 w:1)
	/// Proof: `Tracks::MiddsDb` (`max_values`: None, `max_size`: Some(9895), added: 12370, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(229), added: 2704, mode: `MaxEncodedLen`)
	/// Storage: `Tracks::HashIndex` (r:0 w:1)
	/// Proof: `Tracks::HashIndex` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[37, 9831]`.
	fn unregister(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1046`
		//  Estimated: `13360`
		// Minimum execution time: 75_641_000 picoseconds.
		Weight::from_parts(82_064_645, 13360)
			// Standard Error: 53
			.saturating_add(Weight::from_parts(2_274, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}
