// This file is part of Allfeat.

// Copyright (C) 2022-2024 Allfeat.
// SPDX-License-Identifier: GPL-3.0-or-later

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//! Autogenerated weights for pallet_artists
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-10-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-de-Lois.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("harmonie-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/allfeat
// benchmark
// pallet
// --chain=harmonie-dev
// --steps=50
// --repeat=20
// --pallet=pallet_artists
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/shared/src/weights/artists.rs
// --header=./HEADER
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_artists.
pub trait WeightInfo {
	fn register(n: u32, g: u32, a: u32, ) -> Weight;
	fn force_unregister(n: u32, g: u32, a: u32, ) -> Weight;
	fn unregister(n: u32, g: u32, a: u32, ) -> Weight;
	fn update_add_genres(n: u32, ) -> Weight;
	fn update_remove_genres(n: u32, ) -> Weight;
	fn update_clear_genres(n: u32, ) -> Weight;
	fn update_description() -> Weight;
	fn update_add_assets(n: u32, ) -> Weight;
	fn update_remove_assets(n: u32, ) -> Weight;
	fn update_clear_assets(n: u32, ) -> Weight;
	fn update_main_type() -> Weight;
	fn update_extra_types() -> Weight;
}

/// Weights for pallet_artists using the Allfeat node and recommended hardware.
pub struct AllfeatWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_artists::WeightInfo for AllfeatWeight<T> {
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(2284), added: 4759, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 128]`.
	/// The range of component `g` is `[0, 5]`.
	/// The range of component `a` is `[0, 64]`.
	fn register(n: u32, _g: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `5749`
		// Minimum execution time: 95_000_000 picoseconds.
		Weight::from_parts(27_888_658, 5749)
			// Standard Error: 23_843
			.saturating_add(Weight::from_parts(593_739, 0).saturating_mul(n.into()))
			// Standard Error: 47_093
			.saturating_add(Weight::from_parts(25_167_854, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	/// Storage: `Artists::ArtistOf` (r:0 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(2284), added: 4759, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 128]`.
	/// The range of component `g` is `[0, 5]`.
	/// The range of component `a` is `[0, 64]`.
	fn force_unregister(_n: u32, g: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `99`
		//  Estimated: `3610`
		// Minimum execution time: 69_000_000 picoseconds.
		Weight::from_parts(75_328_804, 3610)
			// Standard Error: 46_428
			.saturating_add(Weight::from_parts(189_696, 0).saturating_mul(g.into()))
			// Standard Error: 4_012
			.saturating_add(Weight::from_parts(37_722, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(2284), added: 4759, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 128]`.
	/// The range of component `g` is `[0, 5]`.
	/// The range of component `a` is `[0, 64]`.
	fn unregister(_n: u32, g: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294 + a * (32 ±0) + g * (3 ±0) + n * (1 ±0)`
		//  Estimated: `5749`
		// Minimum execution time: 94_000_000 picoseconds.
		Weight::from_parts(109_028_074, 5749)
			// Standard Error: 67_042
			.saturating_add(Weight::from_parts(242_585, 0).saturating_mul(g.into()))
			// Standard Error: 5_793
			.saturating_add(Weight::from_parts(42_153, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(2284), added: 4759, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 4]`.
	fn update_add_genres(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `196 + n * (3 ±0)`
		//  Estimated: `5749`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_336_915, 5749)
			// Standard Error: 18_366
			.saturating_add(Weight::from_parts(15_186, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(2284), added: 4759, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 5]`.
	fn update_remove_genres(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `196 + n * (3 ±0)`
		//  Estimated: `5749`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_841_939, 5749)
			// Standard Error: 7_806
			.saturating_add(Weight::from_parts(50_817, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(2284), added: 4759, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 5]`.
	fn update_clear_genres(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `196 + n * (3 ±0)`
		//  Estimated: `5749`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_704_858, 5749)
			// Standard Error: 11_902
			.saturating_add(Weight::from_parts(89_674, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(2284), added: 4759, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	fn update_description() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `276`
		//  Estimated: `5749`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(60_000_000, 5749)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(2284), added: 4759, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 63]`.
	fn update_add_assets(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295 + n * (32 ±0)`
		//  Estimated: `5749`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_915_991, 5749)
			// Standard Error: 3_801
			.saturating_add(Weight::from_parts(92_149, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(2284), added: 4759, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 64]`.
	fn update_remove_assets(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295 + n * (32 ±0)`
		//  Estimated: `5749`
		// Minimum execution time: 31_000_000 picoseconds.
		Weight::from_parts(32_643_932, 5749)
			// Standard Error: 3_876
			.saturating_add(Weight::from_parts(81_859, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(2284), added: 4759, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(145), added: 2620, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 64]`.
	fn update_clear_assets(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295 + n * (32 ±0)`
		//  Estimated: `5749`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(32_792_455, 5749)
			// Standard Error: 4_439
			.saturating_add(Weight::from_parts(50_429, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(2284), added: 4759, mode: `MaxEncodedLen`)
	fn update_main_type() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `196`
		//  Estimated: `5749`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 5749)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Artists::ArtistOf` (r:1 w:1)
	/// Proof: `Artists::ArtistOf` (`max_values`: None, `max_size`: Some(2284), added: 4759, mode: `MaxEncodedLen`)
	fn update_extra_types() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `196`
		//  Estimated: `5749`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 5749)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}
