// This file is part of Allfeat.

// Copyright (C) 2022-2024 Allfeat.
// SPDX-License-Identifier: GPL-3.0-or-later

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//! Autogenerated weights for pallet_nomination_pools
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-03-27, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `weights-allfeat`, CPU: `AMD EPYC-Milan Processor`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("harmonie-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/allfeat
// benchmark
// pallet
// --chain=harmonie-dev
// --steps=50
// --repeat=20
// --pallet=pallet_nomination_pools
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/harmonie/src/weights/nomination-pools.rs
// --header=./HEADER
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_nomination_pools.
pub trait WeightInfo {
	fn join() -> Weight;
	fn bond_extra_transfer() -> Weight;
	fn bond_extra_other() -> Weight;
	fn claim_payout() -> Weight;
	fn unbond() -> Weight;
	fn pool_withdraw_unbonded(s: u32, ) -> Weight;
	fn withdraw_unbonded_update(s: u32, ) -> Weight;
	fn withdraw_unbonded_kill(s: u32, ) -> Weight;
	fn create() -> Weight;
	fn nominate(n: u32, ) -> Weight;
	fn set_state() -> Weight;
	fn set_metadata(n: u32, ) -> Weight;
	fn set_configs() -> Weight;
	fn update_roles() -> Weight;
	fn chill() -> Weight;
	fn set_commission() -> Weight;
	fn set_commission_max() -> Weight;
	fn set_commission_change_rate() -> Weight;
	fn set_commission_claim_permission() -> Weight;
	fn set_claim_permission() -> Weight;
	fn claim_commission() -> Weight;
	fn adjust_pool_deposit() -> Weight;
}

/// Weights for pallet_nomination_pools using the Allfeat node and recommended hardware.
pub struct AllfeatWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for AllfeatWeight<T> {
	/// Storage: `NominationPools::MinJoinBond` (r:1 w:0)
	/// Proof: `NominationPools::MinJoinBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::PoolMembers` (r:1 w:1)
	/// Proof: `NominationPools::PoolMembers` (`max_values`: None, `max_size`: Some(705), added: 3180, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1067), added: 3542, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::RewardPools` (r:1 w:1)
	/// Proof: `NominationPools::RewardPools` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::GlobalMaxCommission` (r:1 w:0)
	/// Proof: `NominationPools::GlobalMaxCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::MaxPoolMembersPerPool` (r:1 w:0)
	/// Proof: `NominationPools::MaxPoolMembersPerPool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::MaxPoolMembers` (r:1 w:0)
	/// Proof: `NominationPools::MaxPoolMembers` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForPoolMembers` (r:1 w:1)
	/// Proof: `NominationPools::CounterForPoolMembers` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:3 w:3)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListBags` (r:2 w:2)
	/// Proof: `BagsList::ListBags` (`max_values`: None, `max_size`: Some(58), added: 2533, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::TotalValueLocked` (r:1 w:1)
	/// Proof: `NominationPools::TotalValueLocked` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn join() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2975`
		//  Estimated: `8733`
		// Minimum execution time: 164_426_000 picoseconds.
		Weight::from_parts(166_330_000, 8733)
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	/// Storage: `NominationPools::PoolMembers` (r:1 w:1)
	/// Proof: `NominationPools::PoolMembers` (`max_values`: None, `max_size`: Some(705), added: 3180, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::RewardPools` (r:1 w:1)
	/// Proof: `NominationPools::RewardPools` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::GlobalMaxCommission` (r:1 w:0)
	/// Proof: `NominationPools::GlobalMaxCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:3 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1067), added: 3542, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:3 w:3)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListBags` (r:2 w:2)
	/// Proof: `BagsList::ListBags` (`max_values`: None, `max_size`: Some(58), added: 2533, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::TotalValueLocked` (r:1 w:1)
	/// Proof: `NominationPools::TotalValueLocked` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn bond_extra_transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3017`
		//  Estimated: `8763`
		// Minimum execution time: 164_176_000 picoseconds.
		Weight::from_parts(166_189_000, 8763)
			.saturating_add(T::DbWeight::get().reads(17_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	/// Storage: `NominationPools::ClaimPermissions` (r:1 w:0)
	/// Proof: `NominationPools::ClaimPermissions` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::PoolMembers` (r:1 w:1)
	/// Proof: `NominationPools::PoolMembers` (`max_values`: None, `max_size`: Some(705), added: 3180, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::RewardPools` (r:1 w:1)
	/// Proof: `NominationPools::RewardPools` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::GlobalMaxCommission` (r:1 w:0)
	/// Proof: `NominationPools::GlobalMaxCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:3 w:3)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1067), added: 3542, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:3 w:3)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListBags` (r:2 w:2)
	/// Proof: `BagsList::ListBags` (`max_values`: None, `max_size`: Some(58), added: 2533, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::TotalValueLocked` (r:1 w:1)
	/// Proof: `NominationPools::TotalValueLocked` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn bond_extra_other() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3071`
		//  Estimated: `8763`
		// Minimum execution time: 197_245_000 picoseconds.
		Weight::from_parts(199_860_000, 8763)
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	/// Storage: `NominationPools::ClaimPermissions` (r:1 w:0)
	/// Proof: `NominationPools::ClaimPermissions` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::PoolMembers` (r:1 w:1)
	/// Proof: `NominationPools::PoolMembers` (`max_values`: None, `max_size`: Some(705), added: 3180, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::RewardPools` (r:1 w:1)
	/// Proof: `NominationPools::RewardPools` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::GlobalMaxCommission` (r:1 w:0)
	/// Proof: `NominationPools::GlobalMaxCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn claim_payout() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `995`
		//  Estimated: `4170`
		// Minimum execution time: 66_230_000 picoseconds.
		Weight::from_parts(68_643_000, 4170)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `NominationPools::PoolMembers` (r:1 w:1)
	/// Proof: `NominationPools::PoolMembers` (`max_values`: None, `max_size`: Some(705), added: 3180, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::RewardPools` (r:1 w:1)
	/// Proof: `NominationPools::RewardPools` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1067), added: 3542, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::GlobalMaxCommission` (r:1 w:0)
	/// Proof: `NominationPools::GlobalMaxCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Nominators` (r:1 w:0)
	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(354), added: 2829, mode: `MaxEncodedLen`)
	/// Storage: `Staking::MinNominatorBond` (r:1 w:0)
	/// Proof: `Staking::MinNominatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:3 w:3)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListBags` (r:2 w:2)
	/// Proof: `BagsList::ListBags` (`max_values`: None, `max_size`: Some(58), added: 2533, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::SubPoolsStorage` (r:1 w:1)
	/// Proof: `NominationPools::SubPoolsStorage` (`max_values`: None, `max_size`: Some(1197), added: 3672, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForSubPoolsStorage` (r:1 w:1)
	/// Proof: `NominationPools::CounterForSubPoolsStorage` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn unbond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3087`
		//  Estimated: `8733`
		// Minimum execution time: 147_952_000 picoseconds.
		Weight::from_parts(150_296_000, 8733)
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
	}
	/// Storage: `NominationPools::BondedPools` (r:1 w:0)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1067), added: 3542, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::ReversePoolIdLookup` (r:1 w:0)
	/// Proof: `NominationPools::ReversePoolIdLookup` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::TotalValueLocked` (r:1 w:1)
	/// Proof: `NominationPools::TotalValueLocked` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn pool_withdraw_unbonded(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1530`
		//  Estimated: `4752`
		// Minimum execution time: 58_157_000 picoseconds.
		Weight::from_parts(60_861_374, 4752)
			// Standard Error: 959
			.saturating_add(Weight::from_parts(27_040, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `NominationPools::PoolMembers` (r:1 w:1)
	/// Proof: `NominationPools::PoolMembers` (`max_values`: None, `max_size`: Some(705), added: 3180, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::SubPoolsStorage` (r:1 w:1)
	/// Proof: `NominationPools::SubPoolsStorage` (`max_values`: None, `max_size`: Some(1197), added: 3672, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1067), added: 3542, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::ReversePoolIdLookup` (r:1 w:0)
	/// Proof: `NominationPools::ReversePoolIdLookup` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::TotalValueLocked` (r:1 w:1)
	/// Proof: `NominationPools::TotalValueLocked` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForPoolMembers` (r:1 w:1)
	/// Proof: `NominationPools::CounterForPoolMembers` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::ClaimPermissions` (r:0 w:1)
	/// Proof: `NominationPools::ClaimPermissions` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn withdraw_unbonded_update(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1933`
		//  Estimated: `4752`
		// Minimum execution time: 116_525_000 picoseconds.
		Weight::from_parts(119_888_285, 4752)
			// Standard Error: 1_891
			.saturating_add(Weight::from_parts(52_014, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: `NominationPools::PoolMembers` (r:1 w:1)
	/// Proof: `NominationPools::PoolMembers` (`max_values`: None, `max_size`: Some(705), added: 3180, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::SubPoolsStorage` (r:1 w:1)
	/// Proof: `NominationPools::SubPoolsStorage` (`max_values`: None, `max_size`: Some(1197), added: 3672, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:1)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1067), added: 3542, mode: `MaxEncodedLen`)
	/// Storage: `Staking::SlashingSpans` (r:1 w:0)
	/// Proof: `Staking::SlashingSpans` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:2 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:2 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Validators` (r:1 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Nominators` (r:1 w:0)
	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(354), added: 2829, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::ReversePoolIdLookup` (r:1 w:1)
	/// Proof: `NominationPools::ReversePoolIdLookup` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::TotalValueLocked` (r:1 w:1)
	/// Proof: `NominationPools::TotalValueLocked` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForPoolMembers` (r:1 w:1)
	/// Proof: `NominationPools::CounterForPoolMembers` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForReversePoolIdLookup` (r:1 w:1)
	/// Proof: `NominationPools::CounterForReversePoolIdLookup` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::RewardPools` (r:1 w:1)
	/// Proof: `NominationPools::RewardPools` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForRewardPools` (r:1 w:1)
	/// Proof: `NominationPools::CounterForRewardPools` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForSubPoolsStorage` (r:1 w:1)
	/// Proof: `NominationPools::CounterForSubPoolsStorage` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::Metadata` (r:1 w:1)
	/// Proof: `NominationPools::Metadata` (`max_values`: None, `max_size`: Some(270), added: 2745, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForBondedPools` (r:1 w:1)
	/// Proof: `NominationPools::CounterForBondedPools` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Payee` (r:0 w:1)
	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::ClaimPermissions` (r:0 w:1)
	/// Proof: `NominationPools::ClaimPermissions` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 100]`.
	fn withdraw_unbonded_kill(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2159`
		//  Estimated: `8514`
		// Minimum execution time: 206_809_000 picoseconds.
		Weight::from_parts(211_883_113, 8514)
			// Standard Error: 3_289
			.saturating_add(Weight::from_parts(5_255, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(24_u64))
			.saturating_add(T::DbWeight::get().writes(20_u64))
	}
	/// Storage: `NominationPools::LastPoolId` (r:1 w:1)
	/// Proof: `NominationPools::LastPoolId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Staking::MinNominatorBond` (r:1 w:0)
	/// Proof: `Staking::MinNominatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::MinCreateBond` (r:1 w:0)
	/// Proof: `NominationPools::MinCreateBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::MinJoinBond` (r:1 w:0)
	/// Proof: `NominationPools::MinJoinBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::MaxPools` (r:1 w:0)
	/// Proof: `NominationPools::MaxPools` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForBondedPools` (r:1 w:1)
	/// Proof: `NominationPools::CounterForBondedPools` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::PoolMembers` (r:1 w:1)
	/// Proof: `NominationPools::PoolMembers` (`max_values`: None, `max_size`: Some(705), added: 3180, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::MaxPoolMembersPerPool` (r:1 w:0)
	/// Proof: `NominationPools::MaxPoolMembersPerPool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::MaxPoolMembers` (r:1 w:0)
	/// Proof: `NominationPools::MaxPoolMembers` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForPoolMembers` (r:1 w:1)
	/// Proof: `NominationPools::CounterForPoolMembers` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:1)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1067), added: 3542, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:2 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:2 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::TotalValueLocked` (r:1 w:1)
	/// Proof: `NominationPools::TotalValueLocked` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::RewardPools` (r:1 w:1)
	/// Proof: `NominationPools::RewardPools` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForRewardPools` (r:1 w:1)
	/// Proof: `NominationPools::CounterForRewardPools` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::ReversePoolIdLookup` (r:1 w:1)
	/// Proof: `NominationPools::ReversePoolIdLookup` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForReversePoolIdLookup` (r:1 w:1)
	/// Proof: `NominationPools::CounterForReversePoolIdLookup` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Payee` (r:0 w:1)
	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1114`
		//  Estimated: `8514`
		// Minimum execution time: 154_952_000 picoseconds.
		Weight::from_parts(158_056_000, 8514)
			.saturating_add(T::DbWeight::get().reads(24_u64))
			.saturating_add(T::DbWeight::get().writes(17_u64))
	}
	/// Storage: `NominationPools::BondedPools` (r:1 w:0)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::PoolMembers` (r:1 w:0)
	/// Proof: `NominationPools::PoolMembers` (`max_values`: None, `max_size`: Some(705), added: 3180, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1067), added: 3542, mode: `MaxEncodedLen`)
	/// Storage: `Staking::MinNominatorBond` (r:1 w:0)
	/// Proof: `Staking::MinNominatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::MinCreateBond` (r:1 w:0)
	/// Proof: `NominationPools::MinCreateBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::MinJoinBond` (r:1 w:0)
	/// Proof: `NominationPools::MinJoinBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Nominators` (r:1 w:1)
	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(354), added: 2829, mode: `MaxEncodedLen`)
	/// Storage: `Staking::MaxNominatorsCount` (r:1 w:0)
	/// Proof: `Staking::MaxNominatorsCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Validators` (r:17 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:1 w:1)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListBags` (r:1 w:1)
	/// Proof: `BagsList::ListBags` (`max_values`: None, `max_size`: Some(58), added: 2533, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::CounterForListNodes` (r:1 w:1)
	/// Proof: `BagsList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CounterForNominators` (r:1 w:1)
	/// Proof: `Staking::CounterForNominators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 16]`.
	fn nominate(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1741`
		//  Estimated: `4532 + n * (2508 ±0)`
		// Minimum execution time: 70_536_000 picoseconds.
		Weight::from_parts(72_561_850, 4532)
			// Standard Error: 15_652
			.saturating_add(Weight::from_parts(1_194_754, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 2508).saturating_mul(n.into()))
	}
	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1067), added: 3542, mode: `MaxEncodedLen`)
	fn set_state() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1201`
		//  Estimated: `4532`
		// Minimum execution time: 27_531_000 picoseconds.
		Weight::from_parts(28_042_000, 4532)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `NominationPools::BondedPools` (r:1 w:0)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::Metadata` (r:1 w:1)
	/// Proof: `NominationPools::Metadata` (`max_values`: None, `max_size`: Some(270), added: 2745, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForMetadata` (r:1 w:1)
	/// Proof: `NominationPools::CounterForMetadata` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 256]`.
	fn set_metadata(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `450`
		//  Estimated: `3735`
		// Minimum execution time: 11_477_000 picoseconds.
		Weight::from_parts(12_263_954, 3735)
			// Standard Error: 127
			.saturating_add(Weight::from_parts(776, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NominationPools::MinJoinBond` (r:0 w:1)
	/// Proof: `NominationPools::MinJoinBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::MaxPoolMembers` (r:0 w:1)
	/// Proof: `NominationPools::MaxPoolMembers` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::MaxPoolMembersPerPool` (r:0 w:1)
	/// Proof: `NominationPools::MaxPoolMembersPerPool` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::MinCreateBond` (r:0 w:1)
	/// Proof: `NominationPools::MinCreateBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::GlobalMaxCommission` (r:0 w:1)
	/// Proof: `NominationPools::GlobalMaxCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::MaxPools` (r:0 w:1)
	/// Proof: `NominationPools::MaxPools` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_configs() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_175_000 picoseconds.
		Weight::from_parts(3_375_000, 0)
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	fn update_roles() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `450`
		//  Estimated: `3647`
		// Minimum execution time: 13_541_000 picoseconds.
		Weight::from_parts(14_151_000, 3647)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `NominationPools::BondedPools` (r:1 w:0)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::PoolMembers` (r:1 w:0)
	/// Proof: `NominationPools::PoolMembers` (`max_values`: None, `max_size`: Some(705), added: 3180, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1067), added: 3542, mode: `MaxEncodedLen`)
	/// Storage: `Staking::MinNominatorBond` (r:1 w:0)
	/// Proof: `Staking::MinNominatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Validators` (r:1 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Nominators` (r:1 w:1)
	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(354), added: 2829, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CounterForNominators` (r:1 w:1)
	/// Proof: `Staking::CounterForNominators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:1 w:1)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(106), added: 2581, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListBags` (r:1 w:1)
	/// Proof: `BagsList::ListBags` (`max_values`: None, `max_size`: Some(58), added: 2533, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::CounterForListNodes` (r:1 w:1)
	/// Proof: `BagsList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn chill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1859`
		//  Estimated: `4532`
		// Minimum execution time: 64_917_000 picoseconds.
		Weight::from_parts(66_931_000, 4532)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::RewardPools` (r:1 w:1)
	/// Proof: `NominationPools::RewardPools` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::GlobalMaxCommission` (r:1 w:0)
	/// Proof: `NominationPools::GlobalMaxCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn set_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `697`
		//  Estimated: `3647`
		// Minimum execution time: 26_469_000 picoseconds.
		Weight::from_parts(27_671_000, 3647)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::GlobalMaxCommission` (r:1 w:0)
	/// Proof: `NominationPools::GlobalMaxCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_commission_max() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `478`
		//  Estimated: `3647`
		// Minimum execution time: 13_851_000 picoseconds.
		Weight::from_parts(14_542_000, 3647)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	fn set_commission_change_rate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `450`
		//  Estimated: `3647`
		// Minimum execution time: 13_400_000 picoseconds.
		Weight::from_parts(14_332_000, 3647)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	fn set_commission_claim_permission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `450`
		//  Estimated: `3647`
		// Minimum execution time: 13_461_000 picoseconds.
		Weight::from_parts(14_161_000, 3647)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `NominationPools::PoolMembers` (r:1 w:0)
	/// Proof: `NominationPools::PoolMembers` (`max_values`: None, `max_size`: Some(705), added: 3180, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::ClaimPermissions` (r:1 w:1)
	/// Proof: `NominationPools::ClaimPermissions` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	fn set_claim_permission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `495`
		//  Estimated: `4170`
		// Minimum execution time: 12_850_000 picoseconds.
		Weight::from_parts(13_360_000, 4170)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `NominationPools::BondedPools` (r:1 w:0)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::RewardPools` (r:1 w:1)
	/// Proof: `NominationPools::RewardPools` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::GlobalMaxCommission` (r:1 w:0)
	/// Proof: `NominationPools::GlobalMaxCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn claim_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `837`
		//  Estimated: `3647`
		// Minimum execution time: 54_782_000 picoseconds.
		Weight::from_parts(55_914_000, 3647)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `NominationPools::BondedPools` (r:1 w:0)
	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(182), added: 2657, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn adjust_pool_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `760`
		//  Estimated: `4752`
		// Minimum execution time: 60_882_000 picoseconds.
		Weight::from_parts(62_294_000, 4752)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}
