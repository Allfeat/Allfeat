
//! Autogenerated weights for pallet_state_trie_migration
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `symphonie-01`, CPU: `Intel(R) Xeon(R) Platinum 8168 CPU @ 2.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/allfeat
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_state_trie_migration
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/symphonie/src/weights/pallet_state_trie_migration.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for pallet_state_trie_migration using the Allfeat node and recommended hardware.
pub struct AllfeatWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_state_trie_migration::WeightInfo for AllfeatWeight<T> {
	/// Storage: StateTrieMigration SignedMigrationMaxLimits (r:1 w:0)
	/// Proof: StateTrieMigration SignedMigrationMaxLimits (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: StateTrieMigration MigrationProcess (r:1 w:1)
	/// Proof: StateTrieMigration MigrationProcess (max_values: Some(1), max_size: Some(1042), added: 1537, mode: MaxEncodedLen)
	fn continue_migrate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `74`
		//  Estimated: `2527`
		// Minimum execution time: 67_206_000 picoseconds.
		Weight::from_parts(68_009_000, 2527)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: StateTrieMigration SignedMigrationMaxLimits (r:1 w:0)
	/// Proof: StateTrieMigration SignedMigrationMaxLimits (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn continue_migrate_wrong_witness() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `1493`
		// Minimum execution time: 19_825_000 picoseconds.
		Weight::from_parts(20_032_000, 1493)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn migrate_custom_top_success() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 40_932_000 picoseconds.
		Weight::from_parts(41_338_000, 0)
	}
	/// Storage: unknown `0x666f6f` (r:1 w:1)
	/// Proof Skipped: unknown `0x666f6f` (r:1 w:1)
	fn migrate_custom_top_fail() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `80`
		//  Estimated: `3545`
		// Minimum execution time: 142_563_000 picoseconds.
		Weight::from_parts(143_381_000, 3545)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn migrate_custom_child_success() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 41_883_000 picoseconds.
		Weight::from_parts(42_419_000, 0)
	}
	/// Storage: unknown `0x666f6f` (r:1 w:1)
	/// Proof Skipped: unknown `0x666f6f` (r:1 w:1)
	fn migrate_custom_child_fail() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `105`
		//  Estimated: `3570`
		// Minimum execution time: 140_138_000 picoseconds.
		Weight::from_parts(140_950_000, 3570)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: unknown `0x6b6579` (r:1 w:1)
	/// Proof Skipped: unknown `0x6b6579` (r:1 w:1)
	/// The range of component `v` is `[1, 4194304]`.
	fn process_top_key(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `92 + v * (1 ±0)`
		//  Estimated: `3557 + v * (1 ±0)`
		// Minimum execution time: 18_341_000 picoseconds.
		Weight::from_parts(18_493_000, 3557)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(2_316, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(v.into()))
	}
}
