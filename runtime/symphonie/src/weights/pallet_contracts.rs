
//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `symphonie-01`, CPU: `Intel(R) Xeon(R) Platinum 8168 CPU @ 2.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/allfeat
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/symphonie/src/weights/pallet_contracts.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for pallet_contracts using the Allfeat node and recommended hardware.
pub struct AllfeatWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_contracts::weights::WeightInfo for AllfeatWeight<T> {
	/// Storage: Contracts DeletionQueueCounter (r:1 w:0)
	/// Proof: Contracts DeletionQueueCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `1527`
		// Minimum execution time: 11_125_000 picoseconds.
		Weight::from_parts(11_335_000, 1527)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `421 + k * (69 ±0)`
		//  Estimated: `411 + k * (70 ±0)`
		// Minimum execution time: 48_168_000 picoseconds.
		Weight::from_parts(48_588_000, 411)
			// Standard Error: 2_667
			.saturating_add(Weight::from_parts(3_346_653, 0).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: Contracts PristineCode (r:1 w:0)
	/// Proof: Contracts PristineCode (max_values: None, max_size: Some(125988), added: 128463, mode: Measured)
	/// Storage: Contracts CodeStorage (r:0 w:1)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// The range of component `c` is `[0, 61717]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171 + c * (1 ±0)`
		//  Estimated: `3641 + c * (1 ±0)`
		// Minimum execution time: 116_727_000 picoseconds.
		Weight::from_parts(110_025_500, 3641)
			// Standard Error: 92
			.saturating_add(Weight::from_parts(170_150, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `c` is `[0, 125952]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `512`
		//  Estimated: `6482 + c * (1 ±0)`
		// Minimum execution time: 1_126_028_000 picoseconds.
		Weight::from_parts(1_177_761_090, 6482)
			// Standard Error: 44
			.saturating_add(Weight::from_parts(112_402, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: System EventTopics (r:3 w:3)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// Storage: Contracts CodeStorage (r:0 w:1)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Contracts PristineCode (r:0 w:1)
	/// Proof: Contracts PristineCode (max_values: None, max_size: Some(125988), added: 128463, mode: Measured)
	/// The range of component `c` is `[0, 61717]`.
	/// The range of component `i` is `[0, 1048576]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, i: u32, _s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `100`
		//  Estimated: `8490`
		// Minimum execution time: 6_180_514_000 picoseconds.
		Weight::from_parts(6_223_568_000, 8490)
			// Standard Error: 3_607
			.saturating_add(Weight::from_parts(307_934, 0).saturating_mul(c.into()))
			// Standard Error: 212
			.saturating_add(Weight::from_parts(1_472, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1048576]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(i: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `312`
		//  Estimated: `6229`
		// Minimum execution time: 3_244_901_000 picoseconds.
		Weight::from_parts(1_248_038_022, 6229)
			// Standard Error: 26
			.saturating_add(Weight::from_parts(1_867, 0).saturating_mul(i.into()))
			// Standard Error: 26
			.saturating_add(Weight::from_parts(2_240, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `589`
		//  Estimated: `6529`
		// Minimum execution time: 979_399_000 picoseconds.
		Weight::from_parts(993_470_000, 6529)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:1 w:1)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// Storage: Contracts CodeStorage (r:0 w:1)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Contracts PristineCode (r:0 w:1)
	/// Proof: Contracts PristineCode (max_values: None, max_size: Some(125988), added: 128463, mode: Measured)
	/// The range of component `c` is `[0, 61717]`.
	fn upload_code(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3507`
		// Minimum execution time: 1_000_297_000 picoseconds.
		Weight::from_parts(1_064_261_825, 3507)
			// Standard Error: 95
			.saturating_add(Weight::from_parts(317_254, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:1 w:1)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// Storage: Contracts CodeStorage (r:0 w:1)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Contracts PristineCode (r:0 w:1)
	/// Proof: Contracts PristineCode (max_values: None, max_size: Some(125988), added: 128463, mode: Measured)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `186`
		//  Estimated: `3651`
		// Minimum execution time: 159_286_000 picoseconds.
		Weight::from_parts(160_653_000, 3651)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:2 w:2)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:3 w:3)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `503`
		//  Estimated: `8918`
		// Minimum execution time: 131_154_000 picoseconds.
		Weight::from_parts(131_848_000, 8918)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `611 + r * (6 ±0)`
		//  Estimated: `6552 + r * (6 ±0)`
		// Minimum execution time: 942_578_000 picoseconds.
		Weight::from_parts(972_282_478, 6552)
			// Standard Error: 1_070
			.saturating_add(Weight::from_parts(2_039_630, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1601 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `669 + r * (240 ±0)`
		//  Estimated: `6573 + r * (2715 ±0)`
		// Minimum execution time: 944_030_000 picoseconds.
		Weight::from_parts(559_711_191, 6573)
			// Standard Error: 14_445
			.saturating_add(Weight::from_parts(13_114_390, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2715).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1601 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `661 + r * (244 ±0)`
		//  Estimated: `6577 + r * (2719 ±0)`
		// Minimum execution time: 951_665_000 picoseconds.
		Weight::from_parts(614_432_006, 6577)
			// Standard Error: 12_827
			.saturating_add(Weight::from_parts(18_150_630, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2719).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `618 + r * (6 ±0)`
		//  Estimated: `6560 + r * (6 ±0)`
		// Minimum execution time: 947_433_000 picoseconds.
		Weight::from_parts(974_595_404, 6560)
			// Standard Error: 991
			.saturating_add(Weight::from_parts(2_858_605, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `608 + r * (3 ±0)`
		//  Estimated: `6553 + r * (3 ±0)`
		// Minimum execution time: 931_047_000 picoseconds.
		Weight::from_parts(953_435_388, 6553)
			// Standard Error: 755
			.saturating_add(Weight::from_parts(406_896, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 3).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_address(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `612 + r * (6 ±0)`
		//  Estimated: `6554 + r * (6 ±0)`
		// Minimum execution time: 942_557_000 picoseconds.
		Weight::from_parts(961_870_647, 6554)
			// Standard Error: 1_152
			.saturating_add(Weight::from_parts(2_052_960, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `608 + r * (6 ±0)`
		//  Estimated: `6549 + r * (6 ±0)`
		// Minimum execution time: 942_432_000 picoseconds.
		Weight::from_parts(969_958_798, 6549)
			// Standard Error: 895
			.saturating_add(Weight::from_parts(3_717_281, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:2 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `751 + r * (6 ±0)`
		//  Estimated: `6673 + r * (6 ±0)`
		// Minimum execution time: 942_785_000 picoseconds.
		Weight::from_parts(972_862_269, 6673)
			// Standard Error: 3_203
			.saturating_add(Weight::from_parts(9_978_200, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `622 + r * (6 ±0)`
		//  Estimated: `6571 + r * (6 ±0)`
		// Minimum execution time: 944_672_000 picoseconds.
		Weight::from_parts(975_214_014, 6571)
			// Standard Error: 1_298
			.saturating_add(Weight::from_parts(2_043_684, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `620 + r * (6 ±0)`
		//  Estimated: `6569 + r * (6 ±0)`
		// Minimum execution time: 948_612_000 picoseconds.
		Weight::from_parts(972_532_658, 6569)
			// Standard Error: 1_073
			.saturating_add(Weight::from_parts(2_036_039, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `617 + r * (6 ±0)`
		//  Estimated: `6567 + r * (6 ±0)`
		// Minimum execution time: 945_361_000 picoseconds.
		Weight::from_parts(971_174_664, 6567)
			// Standard Error: 991
			.saturating_add(Weight::from_parts(2_028_321, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_now(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `608 + r * (6 ±0)`
		//  Estimated: `6553 + r * (6 ±0)`
		// Minimum execution time: 943_558_000 picoseconds.
		Weight::from_parts(970_877_318, 6553)
			// Standard Error: 1_675
			.saturating_add(Weight::from_parts(2_036_620, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// Proof: TransactionPayment NextFeeMultiplier (max_values: Some(1), max_size: Some(16), added: 511, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `681 + r * (14 ±0)`
		//  Estimated: `6614 + r * (14 ±0)`
		// Minimum execution time: 945_471_000 picoseconds.
		Weight::from_parts(984_454_362, 6614)
			// Standard Error: 1_930
			.saturating_add(Weight::from_parts(6_818_212, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 14).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `575 + r * (4 ±0)`
		//  Estimated: `6517 + r * (4 ±0)`
		// Minimum execution time: 531_733_000 picoseconds.
		Weight::from_parts(834_112_045, 6517)
			// Standard Error: 724
			.saturating_add(Weight::from_parts(352_883, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_input(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `610 + r * (6 ±0)`
		//  Estimated: `6554 + r * (6 ±0)`
		// Minimum execution time: 779_604_000 picoseconds.
		Weight::from_parts(969_051_976, 6554)
			// Standard Error: 940
			.saturating_add(Weight::from_parts(1_298_350, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_input_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `614`
		//  Estimated: `6554`
		// Minimum execution time: 947_120_000 picoseconds.
		Weight::from_parts(957_890_647, 6554)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(821, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `598 + r * (45 ±0)`
		//  Estimated: `6538 + r * (45 ±0)`
		// Minimum execution time: 862_147_000 picoseconds.
		Weight::from_parts(937_315_361, 6538)
			// Standard Error: 1_571_403
			.saturating_add(Weight::from_parts(5_296_138, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 45).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_return_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `608`
		//  Estimated: `6561`
		// Minimum execution time: 936_602_000 picoseconds.
		Weight::from_parts(947_579_592, 6561)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(245, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:4 w:4)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts DeletionQueueCounter (r:1 w:1)
	/// Proof: Contracts DeletionQueueCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:3 w:3)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// Storage: Contracts DeletionQueue (r:0 w:1)
	/// Proof: Contracts DeletionQueue (max_values: None, max_size: Some(142), added: 2617, mode: Measured)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `640 + r * (305 ±0)`
		//  Estimated: `6580 + r * (7730 ±0)`
		// Minimum execution time: 940_715_000 picoseconds.
		Weight::from_parts(959_020_555, 6580)
			// Standard Error: 1_875_892
			.saturating_add(Weight::from_parts(661_783_444, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((8_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 7730).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_random(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `619 + r * (10 ±0)`
		//  Estimated: `6565 + r * (10 ±0)`
		// Minimum execution time: 811_110_000 picoseconds.
		Weight::from_parts(981_272_561, 6565)
			// Standard Error: 2_274
			.saturating_add(Weight::from_parts(11_873_941, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 10).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `608 + r * (10 ±0)`
		//  Estimated: `6553 + r * (10 ±0)`
		// Minimum execution time: 928_350_000 picoseconds.
		Weight::from_parts(958_533_241, 6553)
			// Standard Error: 8_130
			.saturating_add(Weight::from_parts(21_926_789, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 10).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:6 w:6)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16384]`.
	fn seal_deposit_event_per_topic_and_byte(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `627 + t * (32 ±0)`
		//  Estimated: `6574 + t * (2508 ±0)`
		// Minimum execution time: 768_186_000 picoseconds.
		Weight::from_parts(985_853_024, 6574)
			// Standard Error: 197_909
			.saturating_add(Weight::from_parts(11_416_905, 0).saturating_mul(t.into()))
			// Standard Error: 55
			.saturating_add(Weight::from_parts(903, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 2508).saturating_mul(t.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `607 + r * (7 ±0)`
		//  Estimated: `6551 + r * (7 ±0)`
		// Minimum execution time: 811_007_000 picoseconds.
		Weight::from_parts(845_463_369, 6551)
			// Standard Error: 784
			.saturating_add(Weight::from_parts(609_134, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 7).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1048576]`.
	fn seal_debug_message_per_byte(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `125558`
		//  Estimated: `131500`
		// Minimum execution time: 1_109_712_000 picoseconds.
		Weight::from_parts(1_122_961_549, 131500)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_053, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `675 + r * (292 ±0)`
		//  Estimated: `673 + r * (293 ±0)`
		// Minimum execution time: 948_852_000 picoseconds.
		Weight::from_parts(736_054_623, 673)
			// Standard Error: 19_902
			.saturating_add(Weight::from_parts(19_972_409, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 293).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_set_storage_per_new_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1133`
		//  Estimated: `1107`
		// Minimum execution time: 843_251_000 picoseconds.
		Weight::from_parts(1_178_919_823, 1107)
			// Standard Error: 270
			.saturating_add(Weight::from_parts(1_899, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_set_storage_per_old_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `997 + n * (1 ±0)`
		//  Estimated: `997 + n * (1 ±0)`
		// Minimum execution time: 783_180_000 picoseconds.
		Weight::from_parts(995_745_756, 997)
			// Standard Error: 71
			.saturating_add(Weight::from_parts(182, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `671 + r * (288 ±0)`
		//  Estimated: `675 + r * (289 ±0)`
		// Minimum execution time: 945_510_000 picoseconds.
		Weight::from_parts(727_973_667, 675)
			// Standard Error: 21_092
			.saturating_add(Weight::from_parts(19_579_433, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 289).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_clear_storage_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `993 + n * (1 ±0)`
		//  Estimated: `993 + n * (1 ±0)`
		// Minimum execution time: 982_791_000 picoseconds.
		Weight::from_parts(997_153_613, 993)
			// Standard Error: 72
			.saturating_add(Weight::from_parts(288, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `665 + r * (296 ±0)`
		//  Estimated: `670 + r * (297 ±0)`
		// Minimum execution time: 948_048_000 picoseconds.
		Weight::from_parts(791_441_911, 670)
			// Standard Error: 18_326
			.saturating_add(Weight::from_parts(17_359_514, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 297).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_get_storage_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1009 + n * (1 ±0)`
		//  Estimated: `1009 + n * (1 ±0)`
		// Minimum execution time: 980_956_000 picoseconds.
		Weight::from_parts(993_304_792, 1009)
			// Standard Error: 74
			.saturating_add(Weight::from_parts(985, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `686 + r * (288 ±0)`
		//  Estimated: `687 + r * (289 ±0)`
		// Minimum execution time: 946_478_000 picoseconds.
		Weight::from_parts(767_037_985, 687)
			// Standard Error: 19_211
			.saturating_add(Weight::from_parts(16_542_794, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 289).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_contains_storage_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `996 + n * (1 ±0)`
		//  Estimated: `996 + n * (1 ±0)`
		// Minimum execution time: 761_477_000 picoseconds.
		Weight::from_parts(993_059_109, 996)
			// Standard Error: 78
			.saturating_add(Weight::from_parts(169, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `659 + r * (296 ±0)`
		//  Estimated: `666 + r * (297 ±0)`
		// Minimum execution time: 950_981_000 picoseconds.
		Weight::from_parts(729_067_711, 666)
			// Standard Error: 25_018
			.saturating_add(Weight::from_parts(20_406_180, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 297).saturating_mul(r.into()))
	}
	/// Storage: Skipped Metadata (r:0 w:0)
	/// Proof Skipped: Skipped Metadata (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_take_storage_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1010 + n * (1 ±0)`
		//  Estimated: `1010 + n * (1 ±0)`
		// Minimum execution time: 804_760_000 picoseconds.
		Weight::from_parts(1_001_463_224, 1010)
			// Standard Error: 79
			.saturating_add(Weight::from_parts(1_032, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: System Account (r:1602 w:1601)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1097 + r * (45 ±0)`
		//  Estimated: `6987 + r * (2520 ±0)`
		// Minimum execution time: 949_598_000 picoseconds.
		Weight::from_parts(58_292_848, 6987)
			// Standard Error: 95_887
			.saturating_add(Weight::from_parts(237_921_309, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 2520).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:801 w:801)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:2 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:802 w:802)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_call(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1001 + r * (276 ±0)`
		//  Estimated: `6908 + r * (2752 ±0)`
		// Minimum execution time: 958_668_000 picoseconds.
		Weight::from_parts(962_307_000, 6908)
			// Standard Error: 198_786
			.saturating_add(Weight::from_parts(867_572_419, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 2752).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:736 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:737 w:737)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 800]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (502 ±0)`
		//  Estimated: `6557 + r * (2572 ±10)`
		// Minimum execution time: 953_099_000 picoseconds.
		Weight::from_parts(3_975_856_374, 6557)
			// Standard Error: 4_519_392
			.saturating_add(Weight::from_parts(844_833_774, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 2572).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:3 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:2 w:2)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:2 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:3 w:3)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1048576]`.
	fn seal_call_per_transfer_clone_byte(t: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `984 + t * (204 ±0)`
		//  Estimated: `9399 + t * (5154 ±0)`
		// Minimum execution time: 1_899_137_000 picoseconds.
		Weight::from_parts(1_711_339_455, 9399)
			// Standard Error: 1_527_752
			.saturating_add(Weight::from_parts(206_482_052, 0).saturating_mul(t.into()))
			// Standard Error: 2
			.saturating_add(Weight::from_parts(868, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 5154).saturating_mul(t.into()))
	}
	/// Storage: System Account (r:1602 w:1602)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:801 w:801)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:801 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:800 w:800)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:802 w:802)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[1, 800]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1037 + r * (254 ±0)`
		//  Estimated: `6873 + r * (5205 ±0)`
		// Minimum execution time: 2_549_969_000 picoseconds.
		Weight::from_parts(2_566_492_000, 6873)
			// Standard Error: 762_120
			.saturating_add(Weight::from_parts(1_634_533_513, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(T::DbWeight::get().writes((5_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 5205).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:4 w:4)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:2 w:2)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:2 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:3 w:3)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `i` is `[0, 983040]`.
	/// The range of component `s` is `[0, 983040]`.
	fn seal_instantiate_per_transfer_input_salt_byte(t: u32, i: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `900 + t * (187 ±0)`
		//  Estimated: `9326 + t * (2616 ±3)`
		// Minimum execution time: 3_987_697_000 picoseconds.
		Weight::from_parts(1_587_024_983, 9326)
			// Standard Error: 6_756_170
			.saturating_add(Weight::from_parts(292_660_432, 0).saturating_mul(t.into()))
			// Standard Error: 10
			.saturating_add(Weight::from_parts(2_036, 0).saturating_mul(i.into()))
			// Standard Error: 10
			.saturating_add(Weight::from_parts(2_239, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(10_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 2616).saturating_mul(t.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `607 + r * (8 ±0)`
		//  Estimated: `6548 + r * (8 ±0)`
		// Minimum execution time: 935_297_000 picoseconds.
		Weight::from_parts(960_862_343, 6548)
			// Standard Error: 961
			.saturating_add(Weight::from_parts(1_901_985, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_sha2_256_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `615`
		//  Estimated: `6555`
		// Minimum execution time: 941_806_000 picoseconds.
		Weight::from_parts(940_124_565, 6555)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(5_094, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `609 + r * (8 ±0)`
		//  Estimated: `6551 + r * (8 ±0)`
		// Minimum execution time: 933_972_000 picoseconds.
		Weight::from_parts(958_708_329, 6551)
			// Standard Error: 1_504
			.saturating_add(Weight::from_parts(2_141_414, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_keccak_256_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `617`
		//  Estimated: `6559`
		// Minimum execution time: 938_717_000 picoseconds.
		Weight::from_parts(939_475_700, 6559)
			// Standard Error: 2
			.saturating_add(Weight::from_parts(4_232, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `609 + r * (8 ±0)`
		//  Estimated: `6554 + r * (8 ±0)`
		// Minimum execution time: 935_672_000 picoseconds.
		Weight::from_parts(961_339_743, 6554)
			// Standard Error: 879
			.saturating_add(Weight::from_parts(1_712_424, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_blake2_256_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `617`
		//  Estimated: `6563`
		// Minimum execution time: 940_917_000 picoseconds.
		Weight::from_parts(947_389_685, 6563)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_253, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `609 + r * (8 ±0)`
		//  Estimated: `6555 + r * (8 ±0)`
		// Minimum execution time: 929_651_000 picoseconds.
		Weight::from_parts(953_549_019, 6555)
			// Standard Error: 916
			.saturating_add(Weight::from_parts(1_719_473, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_blake2_128_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `617`
		//  Estimated: `6557`
		// Minimum execution time: 932_996_000 picoseconds.
		Weight::from_parts(939_954_581, 6557)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_246, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[0, 125697]`.
	fn seal_sr25519_verify_per_byte(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `742 + n * (1 ±0)`
		//  Estimated: `6679 + n * (1 ±0)`
		// Minimum execution time: 1_048_675_000 picoseconds.
		Weight::from_parts(1_067_251_111, 6679)
			// Standard Error: 12
			.saturating_add(Weight::from_parts(6_548, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 160]`.
	fn seal_sr25519_verify(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `552 + r * (112 ±0)`
		//  Estimated: `6496 + r * (112 ±0)`
		// Minimum execution time: 947_946_000 picoseconds.
		Weight::from_parts(1_055_324_386, 6496)
			// Standard Error: 21_217
			.saturating_add(Weight::from_parts(89_618_319, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 112).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 160]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `652 + r * (76 ±0)`
		//  Estimated: `6546 + r * (77 ±0)`
		// Minimum execution time: 947_218_000 picoseconds.
		Weight::from_parts(1_033_142_723, 6546)
			// Standard Error: 414_773
			.saturating_add(Weight::from_parts(51_919_119, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 77).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 160]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `622 + r * (42 ±0)`
		//  Estimated: `6561 + r * (42 ±0)`
		// Minimum execution time: 949_344_000 picoseconds.
		Weight::from_parts(1_034_515_074, 6561)
			// Standard Error: 20_399
			.saturating_add(Weight::from_parts(14_296_409, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 42).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1536 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts OwnerInfoOf (r:1536 w:1536)
	/// Proof: Contracts OwnerInfoOf (max_values: None, max_size: Some(88), added: 2563, mode: Measured)
	/// Storage: System EventTopics (r:1538 w:1538)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + r * (964 ±0)`
		//  Estimated: `8020 + r * (3090 ±10)`
		// Minimum execution time: 720_907_000 picoseconds.
		Weight::from_parts(951_965_000, 8020)
			// Standard Error: 106_846
			.saturating_add(Weight::from_parts(103_605_435, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(r.into())))
			.saturating_add(Weight::from_parts(0, 3090).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_reentrance_count(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `603 + r * (3 ±0)`
		//  Estimated: `6553 + r * (3 ±0)`
		// Minimum execution time: 747_361_000 picoseconds.
		Weight::from_parts(965_487_443, 6553)
			// Standard Error: 571
			.saturating_add(Weight::from_parts(422_198, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 3).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_account_reentrance_count(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1823 + r * (39 ±0)`
		//  Estimated: `7653 + r * (40 ±0)`
		// Minimum execution time: 883_906_000 picoseconds.
		Weight::from_parts(1_088_977_655, 7653)
			// Standard Error: 3_038
			.saturating_add(Weight::from_parts(673_943, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 40).saturating_mul(r.into()))
	}
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: Measured)
	/// Storage: Contracts ContractInfoOf (r:1 w:1)
	/// Proof: Contracts ContractInfoOf (max_values: None, max_size: Some(290), added: 2765, mode: Measured)
	/// Storage: Contracts CodeStorage (r:1 w:0)
	/// Proof: Contracts CodeStorage (max_values: None, max_size: Some(126001), added: 128476, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: Contracts Nonce (r:1 w:1)
	/// Proof: Contracts Nonce (max_values: Some(1), max_size: Some(8), added: 503, mode: Measured)
	/// Storage: System EventTopics (r:2 w:2)
	/// Proof Skipped: System EventTopics (max_values: None, max_size: None, mode: Measured)
	/// The range of component `r` is `[0, 1600]`.
	fn seal_instantiation_nonce(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `606 + r * (3 ±0)`
		//  Estimated: `6553 + r * (3 ±0)`
		// Minimum execution time: 936_717_000 picoseconds.
		Weight::from_parts(967_422_775, 6553)
			// Standard Error: 960
			.saturating_add(Weight::from_parts(373_261, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 3).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_547_000 picoseconds.
		Weight::from_parts(10_044_813, 0)
			// Standard Error: 8
			.saturating_add(Weight::from_parts(24_802, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_953_000 picoseconds.
		Weight::from_parts(10_984_638, 0)
			// Standard Error: 35
			.saturating_add(Weight::from_parts(43_081, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_995_000 picoseconds.
		Weight::from_parts(10_557_491, 0)
			// Standard Error: 57
			.saturating_add(Weight::from_parts(43_842, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_select(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_797_000 picoseconds.
		Weight::from_parts(9_523_130, 0)
			// Standard Error: 29
			.saturating_add(Weight::from_parts(64_983, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_if(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_578_000 picoseconds.
		Weight::from_parts(8_855_476, 0)
			// Standard Error: 86
			.saturating_add(Weight::from_parts(66_739, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_br(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_507_000 picoseconds.
		Weight::from_parts(10_003_864, 0)
			// Standard Error: 42
			.saturating_add(Weight::from_parts(45_115, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_597_000 picoseconds.
		Weight::from_parts(9_736_913, 0)
			// Standard Error: 62
			.saturating_add(Weight::from_parts(57_850, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_511_000 picoseconds.
		Weight::from_parts(9_511_896, 0)
			// Standard Error: 73
			.saturating_add(Weight::from_parts(76_060, 0).saturating_mul(r.into()))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_732_000 picoseconds.
		Weight::from_parts(9_945_291, 0)
			// Standard Error: 38
			.saturating_add(Weight::from_parts(121, 0).saturating_mul(e.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_call(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_570_000 picoseconds.
		Weight::from_parts(9_955_153, 0)
			// Standard Error: 12
			.saturating_add(Weight::from_parts(74_067, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_626_000 picoseconds.
		Weight::from_parts(12_563_370, 0)
			// Standard Error: 61
			.saturating_add(Weight::from_parts(95_706, 0).saturating_mul(r.into()))
	}
	/// The range of component `l` is `[0, 1024]`.
	fn instr_call_per_local(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_676_000 picoseconds.
		Weight::from_parts(10_387_600, 0)
			// Standard Error: 44
			.saturating_add(Weight::from_parts(1_992, 0).saturating_mul(l.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_861_000 picoseconds.
		Weight::from_parts(12_165_247, 0)
			// Standard Error: 8
			.saturating_add(Weight::from_parts(27_142, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_880_000 picoseconds.
		Weight::from_parts(12_337_493, 0)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(25_659, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_566_000 picoseconds.
		Weight::from_parts(12_269_841, 0)
			// Standard Error: 18
			.saturating_add(Weight::from_parts(38_020, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_787_000 picoseconds.
		Weight::from_parts(11_020_588, 0)
			// Standard Error: 35
			.saturating_add(Weight::from_parts(40_058, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_546_000 picoseconds.
		Weight::from_parts(10_863_134, 0)
			// Standard Error: 9
			.saturating_add(Weight::from_parts(38_622, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_889_000 picoseconds.
		Weight::from_parts(11_444_797, 0)
			// Standard Error: 14
			.saturating_add(Weight::from_parts(28_751, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 16]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_851_000 picoseconds.
		Weight::from_parts(8_783_362, 0)
			// Standard Error: 183_625
			.saturating_add(Weight::from_parts(18_060_066, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_528_000 picoseconds.
		Weight::from_parts(9_996_362, 0)
			// Standard Error: 11
			.saturating_add(Weight::from_parts(37_151, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_492_000 picoseconds.
		Weight::from_parts(9_591_690, 0)
			// Standard Error: 26
			.saturating_add(Weight::from_parts(36_203, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_537_000 picoseconds.
		Weight::from_parts(10_106_770, 0)
			// Standard Error: 15
			.saturating_add(Weight::from_parts(37_660, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_502_000 picoseconds.
		Weight::from_parts(9_844_497, 0)
			// Standard Error: 16
			.saturating_add(Weight::from_parts(37_969, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_459_000 picoseconds.
		Weight::from_parts(9_951_863, 0)
			// Standard Error: 10
			.saturating_add(Weight::from_parts(37_413, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_492_000 picoseconds.
		Weight::from_parts(9_762_349, 0)
			// Standard Error: 11
			.saturating_add(Weight::from_parts(37_164, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_636_000 picoseconds.
		Weight::from_parts(9_928_156, 0)
			// Standard Error: 11
			.saturating_add(Weight::from_parts(37_083, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_448_000 picoseconds.
		Weight::from_parts(9_588_303, 0)
			// Standard Error: 20
			.saturating_add(Weight::from_parts(50_979, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_395_000 picoseconds.
		Weight::from_parts(9_205_703, 0)
			// Standard Error: 44
			.saturating_add(Weight::from_parts(51_579, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_652_000 picoseconds.
		Weight::from_parts(10_205_237, 0)
			// Standard Error: 20
			.saturating_add(Weight::from_parts(49_333, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_413_000 picoseconds.
		Weight::from_parts(9_638_025, 0)
			// Standard Error: 36
			.saturating_add(Weight::from_parts(51_073, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_615_000 picoseconds.
		Weight::from_parts(9_161_804, 0)
			// Standard Error: 38
			.saturating_add(Weight::from_parts(51_193, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_547_000 picoseconds.
		Weight::from_parts(9_930_461, 0)
			// Standard Error: 33
			.saturating_add(Weight::from_parts(50_351, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_555_000 picoseconds.
		Weight::from_parts(9_708_199, 0)
			// Standard Error: 28
			.saturating_add(Weight::from_parts(50_187, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_599_000 picoseconds.
		Weight::from_parts(9_605_019, 0)
			// Standard Error: 29
			.saturating_add(Weight::from_parts(50_696, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_432_000 picoseconds.
		Weight::from_parts(9_038_691, 0)
			// Standard Error: 51
			.saturating_add(Weight::from_parts(50_852, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_504_000 picoseconds.
		Weight::from_parts(9_859_822, 0)
			// Standard Error: 30
			.saturating_add(Weight::from_parts(50_478, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_622_000 picoseconds.
		Weight::from_parts(9_829_232, 0)
			// Standard Error: 34
			.saturating_add(Weight::from_parts(50_287, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_496_000 picoseconds.
		Weight::from_parts(9_108_140, 0)
			// Standard Error: 36
			.saturating_add(Weight::from_parts(49_263, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_519_000 picoseconds.
		Weight::from_parts(9_420_643, 0)
			// Standard Error: 34
			.saturating_add(Weight::from_parts(52_645, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_439_000 picoseconds.
		Weight::from_parts(10_022_871, 0)
			// Standard Error: 31
			.saturating_add(Weight::from_parts(59_810, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_428_000 picoseconds.
		Weight::from_parts(9_509_607, 0)
			// Standard Error: 31
			.saturating_add(Weight::from_parts(59_767, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_544_000 picoseconds.
		Weight::from_parts(9_212_631, 0)
			// Standard Error: 57
			.saturating_add(Weight::from_parts(61_416, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_511_000 picoseconds.
		Weight::from_parts(9_816_647, 0)
			// Standard Error: 32
			.saturating_add(Weight::from_parts(57_996, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_553_000 picoseconds.
		Weight::from_parts(9_928_424, 0)
			// Standard Error: 30
			.saturating_add(Weight::from_parts(50_389, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_621_000 picoseconds.
		Weight::from_parts(9_914_172, 0)
			// Standard Error: 31
			.saturating_add(Weight::from_parts(50_197, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_593_000 picoseconds.
		Weight::from_parts(9_693_737, 0)
			// Standard Error: 22
			.saturating_add(Weight::from_parts(50_494, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_480_000 picoseconds.
		Weight::from_parts(9_492_982, 0)
			// Standard Error: 54
			.saturating_add(Weight::from_parts(50_945, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_522_000 picoseconds.
		Weight::from_parts(9_684_928, 0)
			// Standard Error: 31
			.saturating_add(Weight::from_parts(50_780, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_454_000 picoseconds.
		Weight::from_parts(9_268_175, 0)
			// Standard Error: 34
			.saturating_add(Weight::from_parts(50_425, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_594_000 picoseconds.
		Weight::from_parts(9_904_241, 0)
			// Standard Error: 15
			.saturating_add(Weight::from_parts(50_429, 0).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_512_000 picoseconds.
		Weight::from_parts(9_779_492, 0)
			// Standard Error: 38
			.saturating_add(Weight::from_parts(50_453, 0).saturating_mul(r.into()))
	}
}
