
//! Autogenerated weights for `pallet_artists`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `symphonie-01`, CPU: `Intel(R) Xeon(R) Platinum 8168 CPU @ 2.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/allfeat
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_artists
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/symphonie/src/weights/artists.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_artists`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_artists::WeightInfo for WeightInfo<T> {
	// Storage: Artists Artists (r:1 w:0)
	// Storage: Artists Candidates (r:1 w:1)
	/// The range of component `n` is `[1, 128]`.
	fn submit_candidacy(n: u32, ) -> Weight {
		// Minimum execution time: 121_926 nanoseconds.
		Weight::from_ref_time(131_110_721)
			// Standard Error: 1_074
			.saturating_add(Weight::from_ref_time(8_368).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Artists Candidates (r:1 w:1)
	fn withdraw_candidacy() -> Weight {
		// Minimum execution time: 121_155 nanoseconds.
		Weight::from_ref_time(122_034_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Artists Artists (r:1 w:1)
	// Storage: Artists Candidates (r:1 w:1)
	/// The range of component `n` is `[1, 128]`.
	fn approve_candidacy(n: u32, ) -> Weight {
		// Minimum execution time: 90_343 nanoseconds.
		Weight::from_ref_time(92_344_880)
			// Standard Error: 585
			.saturating_add(Weight::from_ref_time(6_767).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Artists Artists (r:1 w:0)
	fn call_as_artist() -> Weight {
		// Minimum execution time: 76_571 nanoseconds.
		Weight::from_ref_time(77_340_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: Artists Candidates (r:1 w:0)
	fn call_as_candidate() -> Weight {
		// Minimum execution time: 76_536 nanoseconds.
		Weight::from_ref_time(77_303_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
