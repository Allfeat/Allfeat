
//! Autogenerated weights for `pallet_recovery`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `symphonie-01`, CPU: `Intel(R) Xeon(R) Platinum 8168 CPU @ 2.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/allfeat
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_recovery
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/symphonie/src/weights/recovery.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_recovery`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_recovery::WeightInfo for WeightInfo<T> {
	// Storage: Recovery Proxy (r:1 w:0)
	fn as_recovered() -> Weight {
		// Minimum execution time: 38_135 nanoseconds.
		Weight::from_ref_time(38_563_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: Recovery Proxy (r:0 w:1)
	fn set_recovered() -> Weight {
		// Minimum execution time: 56_807 nanoseconds.
		Weight::from_ref_time(57_238_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Recovery Recoverable (r:1 w:1)
	/// The range of component `n` is `[1, 9]`.
	fn create_recovery(n: u32, ) -> Weight {
		// Minimum execution time: 121_057 nanoseconds.
		Weight::from_ref_time(122_310_586)
			// Standard Error: 17_476
			.saturating_add(Weight::from_ref_time(591_183).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Recovery Recoverable (r:1 w:0)
	// Storage: Recovery ActiveRecoveries (r:1 w:1)
	fn initiate_recovery() -> Weight {
		// Minimum execution time: 140_761 nanoseconds.
		Weight::from_ref_time(142_743_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Recovery Recoverable (r:1 w:0)
	// Storage: Recovery ActiveRecoveries (r:1 w:1)
	/// The range of component `n` is `[1, 9]`.
	fn vouch_recovery(n: u32, ) -> Weight {
		// Minimum execution time: 93_650 nanoseconds.
		Weight::from_ref_time(95_104_165)
			// Standard Error: 16_871
			.saturating_add(Weight::from_ref_time(678_796).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Recovery Recoverable (r:1 w:0)
	// Storage: Recovery ActiveRecoveries (r:1 w:0)
	// Storage: Recovery Proxy (r:1 w:1)
	/// The range of component `n` is `[1, 9]`.
	fn claim_recovery(n: u32, ) -> Weight {
		// Minimum execution time: 119_989 nanoseconds.
		Weight::from_ref_time(121_982_351)
			// Standard Error: 16_582
			.saturating_add(Weight::from_ref_time(318_107).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Recovery ActiveRecoveries (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `n` is `[1, 9]`.
	fn close_recovery(n: u32, ) -> Weight {
		// Minimum execution time: 141_641 nanoseconds.
		Weight::from_ref_time(143_606_564)
			// Standard Error: 14_995
			.saturating_add(Weight::from_ref_time(245_752).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Recovery ActiveRecoveries (r:1 w:0)
	// Storage: Recovery Recoverable (r:1 w:1)
	/// The range of component `n` is `[1, 9]`.
	fn remove_recovery(n: u32, ) -> Weight {
		// Minimum execution time: 135_634 nanoseconds.
		Weight::from_ref_time(138_111_774)
			// Standard Error: 19_900
			.saturating_add(Weight::from_ref_time(367_057).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Recovery Proxy (r:1 w:1)
	fn cancel_recovered() -> Weight {
		// Minimum execution time: 64_476 nanoseconds.
		Weight::from_ref_time(65_186_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
