
//! Autogenerated weights for `pallet_artist_identity`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `symphonie-01`, CPU: `Intel(R) Xeon(R) Platinum 8168 CPU @ 2.70GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/allfeat
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_artist_identity
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/symphonie/src/weights/artist_identity.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_artist_identity`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_artist_identity::weights::WeightInfo for WeightInfo<T> {
	// Storage: ArtistIdentity ArtistMetadata (r:1 w:1)
	/// The range of component `n` is `[0, 128]`.
	fn update_alias(n: u32, ) -> Weight {
		// Minimum execution time: 68_477 nanoseconds.
		Weight::from_ref_time(117_736_412)
			// Standard Error: 8_425
			.saturating_add(Weight::from_ref_time(54_929).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: ArtistIdentity ArtistMetadata (r:1 w:1)
	/// The range of component `n` is `[0, 512]`.
	fn update_bio(n: u32, ) -> Weight {
		// Minimum execution time: 68_612 nanoseconds.
		Weight::from_ref_time(118_804_232)
			// Standard Error: 2_237
			.saturating_add(Weight::from_ref_time(14_596).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: ArtistIdentity ArtistMetadata (r:1 w:1)
	/// The range of component `n` is `[0, 128]`.
	fn update_profile_picture(n: u32, ) -> Weight {
		// Minimum execution time: 68_236 nanoseconds.
		Weight::from_ref_time(117_226_733)
			// Standard Error: 8_468
			.saturating_add(Weight::from_ref_time(60_520).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: ArtistIdentity ArtistMetadata (r:1 w:1)
	/// The range of component `n` is `[0, 128]`.
	fn update_twitter(n: u32, ) -> Weight {
		// Minimum execution time: 68_122 nanoseconds.
		Weight::from_ref_time(117_118_649)
			// Standard Error: 8_380
			.saturating_add(Weight::from_ref_time(63_376).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: ArtistIdentity ArtistMetadata (r:1 w:1)
	/// The range of component `n` is `[0, 128]`.
	fn update_facebook(n: u32, ) -> Weight {
		// Minimum execution time: 68_147 nanoseconds.
		Weight::from_ref_time(117_044_576)
			// Standard Error: 8_491
			.saturating_add(Weight::from_ref_time(63_907).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: ArtistIdentity ArtistMetadata (r:1 w:1)
	/// The range of component `n` is `[0, 128]`.
	fn update_instagram(n: u32, ) -> Weight {
		// Minimum execution time: 68_104 nanoseconds.
		Weight::from_ref_time(117_202_668)
			// Standard Error: 8_501
			.saturating_add(Weight::from_ref_time(58_971).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: ArtistIdentity ArtistMetadata (r:1 w:1)
	/// The range of component `n` is `[0, 128]`.
	fn update_spotify(n: u32, ) -> Weight {
		// Minimum execution time: 68_092 nanoseconds.
		Weight::from_ref_time(116_977_951)
			// Standard Error: 8_577
			.saturating_add(Weight::from_ref_time(73_877).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: ArtistIdentity ArtistMetadata (r:1 w:1)
	/// The range of component `n` is `[0, 128]`.
	fn update_apple_music(n: u32, ) -> Weight {
		// Minimum execution time: 68_263 nanoseconds.
		Weight::from_ref_time(117_131_559)
			// Standard Error: 8_428
			.saturating_add(Weight::from_ref_time(59_004).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: ArtistIdentity ArtistMetadata (r:1 w:1)
	// Storage: MusicStyles Styles (r:1 w:0)
	/// The range of component `n` is `[1, 5]`.
	/// The range of component `x` is `[1, 32]`.
	fn update_music_styles(n: u32, x: u32, ) -> Weight {
		// Minimum execution time: 133_701 nanoseconds.
		Weight::from_ref_time(120_704_536)
			// Standard Error: 39_015
			.saturating_add(Weight::from_ref_time(17_382_777).saturating_mul(n.into()))
			// Standard Error: 5_659
			.saturating_add(Weight::from_ref_time(34_608).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
