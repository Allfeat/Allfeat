
// This file is part of Allfeat.

// Copyright (C) 2022-2025 Allfeat.
// SPDX-License-Identifier: GPL-3.0-or-later

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_token_allocation`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 51.0.0
//! DATE: 2025-10-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `weights-node`, CPU: `AMD EPYC-Milan Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/allfeat-runtime/allfeat_runtime.compact.compressed.wasm
// --genesis-builder-preset=staging
// --pallet=pallet_token_allocation
// --extrinsic=*
// --output=weights.rs
// --header=./HEADER
// --template=./.maintain/runtimes-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;
use pallet_token_allocation::WeightInfo;

pub struct AllfeatWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AllfeatWeight<T> {
	/// Storage: `TokenAllocation::Envelopes` (r:1 w:0)
	/// Proof: `TokenAllocation::Envelopes` (`max_values`: None, `max_size`: Some(75), added: 2550, mode: `MaxEncodedLen`)
	/// Storage: `TokenAllocation::EnvelopeDistributed` (r:1 w:1)
	/// Proof: `TokenAllocation::EnvelopeDistributed` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	/// Storage: `TokenAllocation::NextAllocationId` (r:1 w:1)
	/// Proof: `TokenAllocation::NextAllocationId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(103), added: 2578, mode: `MaxEncodedLen`)
	/// Storage: `TokenAllocation::Allocations` (r:0 w:1)
	/// Proof: `TokenAllocation::Allocations` (`max_values`: None, `max_size`: Some(121), added: 2596, mode: `MaxEncodedLen`)
	fn add_allocation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1137`
		//  Estimated: `6196`
		// Minimum execution time: 120_570_000 picoseconds.
		Weight::from_parts(122_040_000, 6196)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `TokenAllocation::NextPayoutAt` (r:1 w:0)
	/// Proof: `TokenAllocation::NextPayoutAt` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn on_initialize_noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `184`
		//  Estimated: `1489`
		// Minimum execution time: 4_660_000 picoseconds.
		Weight::from_parts(4_830_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `TokenAllocation::NextPayoutAt` (r:1 w:0)
	/// Proof: `TokenAllocation::NextPayoutAt` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `TokenAllocation::EpochIndex` (r:1 w:0)
	/// Proof: `TokenAllocation::EpochIndex` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `TokenAllocation::PayoutCursor` (r:1 w:1)
	/// Proof: `TokenAllocation::PayoutCursor` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `TokenAllocation::Allocations` (r:257 w:256)
	/// Proof: `TokenAllocation::Allocations` (`max_values`: None, `max_size`: Some(121), added: 2596, mode: `MaxEncodedLen`)
	/// Storage: `TokenAllocation::Envelopes` (r:1 w:0)
	/// Proof: `TokenAllocation::Envelopes` (`max_values`: None, `max_size`: Some(75), added: 2550, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:256 w:256)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:256 w:256)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(103), added: 2578, mode: `MaxEncodedLen`)
	fn on_initialize_partial() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `86906`
		//  Estimated: `668162`
		// Minimum execution time: 15_041_711_000 picoseconds.
		Weight::from_parts(15_237_850_000, 668162)
			.saturating_add(T::DbWeight::get().reads(773_u64))
			.saturating_add(T::DbWeight::get().writes(769_u64))
	}
	/// Storage: `TokenAllocation::NextPayoutAt` (r:1 w:1)
	/// Proof: `TokenAllocation::NextPayoutAt` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `TokenAllocation::EpochIndex` (r:1 w:1)
	/// Proof: `TokenAllocation::EpochIndex` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `TokenAllocation::PayoutCursor` (r:1 w:1)
	/// Proof: `TokenAllocation::PayoutCursor` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `TokenAllocation::Allocations` (r:256 w:255)
	/// Proof: `TokenAllocation::Allocations` (`max_values`: None, `max_size`: Some(121), added: 2596, mode: `MaxEncodedLen`)
	/// Storage: `TokenAllocation::Envelopes` (r:1 w:0)
	/// Proof: `TokenAllocation::Envelopes` (`max_values`: None, `max_size`: Some(75), added: 2550, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:255 w:255)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(103), added: 2578, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 255]`.
	fn on_initialize_epoch_finished(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `308 + x * (337 ±0)`
		//  Estimated: `3989 + x * (2602 ±0)`
		// Minimum execution time: 139_570_000 picoseconds.
		Weight::from_parts(140_410_000, 3989)
			// Standard Error: 60_700
			.saturating_add(Weight::from_parts(59_039_240, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
			.saturating_add(Weight::from_parts(0, 2602).saturating_mul(x.into()))
	}
}
