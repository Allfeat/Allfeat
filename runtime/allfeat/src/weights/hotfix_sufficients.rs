
//! Autogenerated weights for pallet_hotfix_sufficients
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-24, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `harmonie-node-01`, CPU: `Intel(R) Xeon(R) Platinum 8280 CPU @ 2.70GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/allfeat
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_hotfix_sufficients
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/harmonie/src/weights/hotfix-sufficients.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_hotfix_sufficients.
pub trait WeightInfo {
	fn hotfix_inc_account_sufficients(n: u32, ) -> Weight;
}

/// Weights for pallet_hotfix_sufficients using the Allfeat node and recommended hardware.
pub struct AllfeatWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_hotfix_sufficients::WeightInfo for AllfeatWeight<T> {
	/// Storage: `System::Account` (r:1000 w:1000)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 1000]`.
	fn hotfix_inc_account_sufficients(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + n * (124 ±0)`
		//  Estimated: `990 + n * (2591 ±0)`
		// Minimum execution time: 3_949_000 picoseconds.
		Weight::from_parts(4_007_000, 990)
			// Standard Error: 14_645
			.saturating_add(Weight::from_parts(17_599_079, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(n.into()))
	}
}
